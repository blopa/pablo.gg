{
    "componentChunkName": "component---src-templates-blog-post-jsx",
    "path": "/pt-br/blog/games/criando-um-pogo-attack-com-o-phaser-js-game-devlog-17/",
    "result": {"data":{"site":{"siteMetadata":{"siteUrl":"https://pablo.gg"}},"markdownRemark":{"id":"f14b3200-3af3-56b2-b445-2381350d4374","excerpt":"Bom… por onde começar, né? Já se passaram quatro meses desde o último devlog sobre o Super Ollie, mas sabe como é, a vida às vezes é complicada. Anyway, hoje…","html":"<p>Bom… por onde começar, né? Já se passaram quatro meses desde o último devlog sobre o Super Ollie, mas sabe como é, a vida às vezes é complicada.</p>\n<p>Anyway, hoje quero mostrar como criei o <a href=\"https://www.youtube.com/watch?v=_g0hm6TeD0s\" target=\"_blank\" rel=\"noreferrer\">pogo-attack</a> com Phaser para o meu jogo.</p>\n<p><img src=\"/d9e1edab738bb1d7378e2f71f4b2b23d/pogo-attack.gif\" alt=\"pogo-attack\"></p>\n<p>Primeiro precisamos verificar se o herói pode realizar o ataque, e como estamos planejando ter algumas fases onde você não pode usar seu skate, esta é a verificação para o pogo-ataque:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Handle hero using down attack</span>\r\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isHeroOnGround</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isDownJustDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canUseSkate\r\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setHeroState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ATTACKING_DOWN_START</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Don't handle any other state</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Depois de definir o estado do pogo-attack, preciso controlar o movimento do herói para os lados durante o ataque:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isHeroAttackingDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isHeroOnGround</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isRightDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setHeroState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ATTACKING_DOWN_RIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLeftDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setHeroState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ATTACKING_DOWN_LEFT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setHeroState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ATTACKING_DOWN_START</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Em seguida, dentro da função de callback do collider com o inimigo, basta adicionar:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">.</span><span class=\"token function\">isHeroAttackingDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>touching<span class=\"token punctuation\">.</span>down<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    player<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">setVelocityY</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>E aí está, um ataque novo que adiciona muitas possibilidades ao jogo e muito simples de fazer. Vejo vocês no próximo devlog!</p>","fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDQtMjRUMDA6MDA6MDAuMDAwWg==","slug":"/2021/2021-04-24-criando-um-pogo-attack-com-o-phaser-js-game-devlog-17.pt-br/","path":"/blog/games/criando-um-pogo-attack-com-o-phaser-js-game-devlog-17/","locale":"pt-br"},"readingTime":{"minutes":0.95},"frontmatter":{"path":"criando-um-pogo-attack-com-o-phaser-js-game-devlog-17","allowComments":true,"title":"Criando um \"pogo-attack\" com o Phaser JS - Game Devlog #17","date":"2021-04-24T00:00:00.000Z","categories":["games"],"tags":["programação","jogos","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled"],"hideExcerpt":false,"subtitle":""}},"categoryImage":{"childImageSharp":{"original":{"width":1920,"height":1080,"src":"/static/categories_games-45dce0594b4828053338793f21283cda.jpg"}}}},"pageContext":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDQtMjRUMDA6MDA6MDAuMDAwWg==","relatedPosts":[{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDktMDlUMDA6MDA6MDAuMDAwWg==","slug":"/2021/2021-09-09-criando-um-build-para-celular-para-o-meu-jogo-com-o-phaser-js-game-devlog-23.pt-br/","path":"/blog/games/criando-um-build-para-celular-para-o-meu-jogo-com-o-phaser-js-game-devlog-23/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled","celular","android","build para celular"],"categories":["games"],"allowComments":true,"publishOnMedium":false,"cover":null,"date":"2021-09-09T00:00:00.000Z","id":null,"path":"criando-um-build-para-celular-para-o-meu-jogo-com-o-phaser-js-game-devlog-23","show":true,"title":"Criando um build para celular para o meu jogo com o Phaser JS - Game Devlog #23","hideExcerpt":false,"subtitle":""}},{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDgtMjhUMDA6MDA6MDAuMDAwWg==","slug":"/2021/2021-08-28-criando-plataformas-para-o-meu-jogo-em-phaser-js-game-devlog-22.pt-br/","path":"/blog/games/criando-plataformas-para-o-meu-jogo-em-phaser-js-game-devlog-22/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled","plataformas"],"categories":["games"],"allowComments":true,"publishOnMedium":false,"cover":null,"date":"2021-08-28T00:00:00.000Z","id":null,"path":"criando-plataformas-para-o-meu-jogo-em-phaser-js-game-devlog-22","show":true,"title":"Criando plataformas para o meu jogo em Phaser JS - Game Devlog #22","hideExcerpt":false,"subtitle":""}},{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDctMDZUMDA6MDA6MDAuMDAwWg==","slug":"/2021/2021-07-06-escondendo-partes-do-mapa-com-o-phaser-js-game-devlog-21.pt-br/","path":"/blog/games/escondendo-partes-do-mapa-com-o-phaser-js-game-devlog-21/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled","metroidvania"],"categories":["games"],"allowComments":true,"publishOnMedium":null,"cover":null,"date":"2021-07-06T00:00:00.000Z","id":null,"path":"escondendo-partes-do-mapa-com-o-phaser-js-game-devlog-21","show":true,"title":"Escondendo partes do mapa com o Phaser JS - Game Devlog #21","hideExcerpt":null,"subtitle":null}},{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDYtMjhUMDA6MDA6MDAuMDAwWg==","slug":"/2021/2021-06-28-criando-estalactites-que-caem-com-phaser-js-game-devlog-20.pt-br/","path":"/blog/games/criando-estalactites-que-caem-com-phaser-js-game-devlog-20/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled"],"categories":["games"],"allowComments":true,"publishOnMedium":null,"cover":null,"date":"2021-06-28T00:00:00.000Z","id":null,"path":"criando-estalactites-que-caem-com-phaser-js-game-devlog-20","show":true,"title":"Criando estalactites que caem com Phaser JS - Game Devlog #20","hideExcerpt":null,"subtitle":null}},{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDYtMTlUMDA6MDA6MDAuMDAwWg==","slug":"/2021/2021-06-19-criando-uma-monkey-bar-para-se-pendurar-com-o-phaser-js-game-devlog-19.pt-br/","path":"/blog/games/criando-uma-monkey-bar-para-se-pendurar-com-o-phaser-js-game-devlog-19/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled","monkey bar"],"categories":["games"],"allowComments":true,"publishOnMedium":null,"cover":null,"date":"2021-06-19T00:00:00.000Z","id":null,"path":"criando-uma-monkey-bar-para-se-pendurar-com-o-phaser-js-game-devlog-19","show":true,"title":"Criando uma \"Monkey Bar\" para se pendurar com o Phaser JS - Game Devlog #19","hideExcerpt":null,"subtitle":null}},{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjAtMTItMjlUMDA6MDA6MDAuMDAwWg==","slug":"/2020/2020-29-12-adicionando-transicao-ao-carregar-uma-fase-no-phaser-js-skate-platformer-game-devlog-16.pt-br/","path":"/blog/games/adicionando-transicao-ao-carregar-uma-fase-no-phaser-js-skate-platformer-game-devlog-16/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled"],"categories":["games"],"allowComments":true,"publishOnMedium":false,"cover":null,"date":"2020-12-29T00:00:00.000Z","id":null,"path":"adicionando-transicao-ao-carregar-uma-fase-no-phaser-js-skate-platformer-game-devlog-16","show":true,"title":"Adicionando transição ao carregar uma fase no Phaser JS - Game Devlog #16","hideExcerpt":false,"subtitle":""}},{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjAtMTItMTVUMDA6MDA6MDAuMDAwWg==","slug":"/2020/2020-15-12-criando-uma-ai-mais-inteligente-e-performatica-no-phaser-js-skate-platformer-game-devlog-15.pt-br/","path":"/blog/games/criando-uma-ai-mais-inteligente-e-performatica-no-phaser-js-skate-platformer-game-devlog-15/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled","cyberpunk 2077","stadia","ai"],"categories":["games"],"allowComments":true,"publishOnMedium":false,"cover":null,"date":"2020-12-15T00:00:00.000Z","id":null,"path":"criando-uma-ai-mais-inteligente-e-performatica-no-phaser-js-skate-platformer-game-devlog-15","show":true,"title":"Criando uma AI mais inteligente e performática no Phaser JS - Game Devlog #15","hideExcerpt":false,"subtitle":""}},{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjAtMTItMDlUMDA6MDA6MDAuMDAwWg==","slug":"/2020/2020-09-12-criando-clima-chuvoso-no-phaser-js-skate-platformer-game-devlog-14.pt-br/","path":"/blog/games/criando-clima-chuvoso-no-phaser-js-skate-platformer-game-devlog-14/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled","hyrule warriors","clima","chuva"],"categories":["games"],"allowComments":true,"publishOnMedium":false,"cover":null,"date":"2020-12-09T00:00:00.000Z","id":null,"path":"criando-clima-chuvoso-no-phaser-js-skate-platformer-game-devlog-14","show":true,"title":"Criando clima chuvoso no Phaser JS - Skate Platformer Game Devlog #14","hideExcerpt":false,"subtitle":""}},{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjAtMTEtMjlUMDA6MDA6MDAuMDAwWg==","slug":"/2020/2020-29-11-criando-uma-loading-screen-e-traduzindo-o-meu-jogo-no-phaser-js-skate-platformer-game-devlog-13.pt-br/","path":"/blog/games/criando-uma-loading-screen-e-traduzindo-o-meu-jogo-no-phaser-js-skate-platformer-game-devlog-13/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled","i18next","tradução","hyrule warriors"],"categories":["games"],"allowComments":true,"publishOnMedium":false,"cover":null,"date":"2020-11-29T00:00:00.000Z","id":null,"path":"criando-uma-loading-screen-e-traduzindo-o-meu-jogo-no-phaser-js-skate-platformer-game-devlog-13","show":true,"title":"Criando uma loading screen e traduzindo o meu jogo no Phaser JS - Skate Platformer Game Devlog #13","hideExcerpt":false,"subtitle":""}},{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjAtMTEtMTlUMDA6MDA6MDAuMDAwWg==","slug":"/2020/2020-19-11-salvando-progresso-do-jogador-com-checkpoints-no-phaser-js-skate-platformer-game-devlog-12.pt-br/","path":"/blog/games/salvando-progresso-do-jogador-com-checkpoints-no-phaser-js-skate-platformer-game-devlog-12/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled","hyrule warriors"],"categories":["games"],"allowComments":true,"publishOnMedium":false,"cover":null,"date":"2020-11-19T00:00:00.000Z","id":null,"path":"salvando-progresso-do-jogador-com-checkpoints-no-phaser-js-skate-platformer-game-devlog-12","show":true,"title":"Salvando progresso do jogador com checkpoints no Phaser JS - Skate Platformer Game Devlog #12","hideExcerpt":false,"subtitle":""}}],"alternativeHtml":"<p>Bom… por onde começar, né? Já se passaram quatro meses desde o último devlog sobre o Super Ollie, mas sabe como é, a vida às vezes é complicada.</p>\n<p>Anyway, hoje quero mostrar como criei o <a href=\"https://www.youtube.com/watch?v=_g0hm6TeD0s\" target=\"_blank\" rel=\"noreferrer\">pogo-attack</a> com Phaser para o meu jogo.</p>\n<p><img src=\"/d9e1edab738bb1d7378e2f71f4b2b23d/pogo-attack.gif\" alt=\"pogo-attack\"></p>\n<p>Primeiro precisamos verificar se o herói pode realizar o ataque, e como estamos planejando ter algumas fases onde você não pode usar seu skate, esta é a verificação para o pogo-ataque:</p>\n<div class=\"copy-code-block\"><button tabindex=\"0\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copiar</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Handle hero using down attack</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isHeroOnGround</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isDownJustDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canUseSkate\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setHeroState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ATTACKING_DOWN_START</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Don't handle any other state</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>Depois de definir o estado do pogo-attack, preciso controlar o movimento do herói para os lados durante o ataque:</p>\n<div class=\"copy-code-block\"><button tabindex=\"1\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copiar</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isHeroAttackingDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isHeroOnGround</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isRightDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setHeroState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ATTACKING_DOWN_RIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLeftDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setHeroState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ATTACKING_DOWN_LEFT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setHeroState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ATTACKING_DOWN_START</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>Em seguida, dentro da função de callback do collider com o inimigo, basta adicionar:</p>\n<div class=\"copy-code-block\"><button tabindex=\"2\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copiar</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">.</span><span class=\"token function\">isHeroAttackingDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>touching<span class=\"token punctuation\">.</span>down<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    player<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">setVelocityY</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>E aí está, um ataque novo que adiciona muitas possibilidades ao jogo e muito simples de fazer. Vejo vocês no próximo devlog!</p>","otherLanguagesUrl":["/en/blog/games/creating-a-pogo-attack-with-phaser-js-game-devlog-17/"],"rss":{"title":"Criando um \"pogo-attack\" com o Phaser JS - Game Devlog #17","description":"Criando um \"pogo-attack\" com o Phaser JS - Game Devlog #17","date":"2021-04-24T00:00:00.000Z"},"images":["/d9e1edab738bb1d7378e2f71f4b2b23d/pogo-attack.gif"],"videos":[],"comments":[],"googleFormData":{"fvv":1,"pageHistory":0,"fbzx":"5566947645549549202","action":"e/1FAIpQLSeST_0jBnLKkEkXGpyx9LWrvV2a1-1F5dr-AcA4wn0BSRyPCw","title":"blog_comment","description":null,"fields":[{"label":"name","description":null,"type":"SHORT_ANSWER","id":"1953327618","required":true},{"label":"email","description":null,"type":"SHORT_ANSWER","id":"1309141965","required":false},{"label":"twitter","description":null,"type":"SHORT_ANSWER","id":"740186305","required":false},{"label":"comment","description":null,"type":"LONG_ANSWER","id":"1663940054","required":true},{"label":"post_path","description":null,"type":"SHORT_ANSWER","id":"1852628638","required":true}],"fieldsOrder":{"740186305":2,"1309141965":1,"1663940054":3,"1852628638":4,"1953327618":0}},"pageType":"blogPost","categoryImage":"/categories_games.jpg/","slug":"/2021/2021-04-24-criando-um-pogo-attack-com-o-phaser-js-game-devlog-17.pt-br/","locale":"pt-br","title":"Criando um \"pogo-attack\" com o Phaser JS - Game Devlog #17","previous":{"excerpt":"Quando eu estava na faculdade, web development não era uma…","html":"<p>Quando eu estava na faculdade, web development não era uma parte importante da programação como é hoje, eu não tive uma única aula sobre web e agora trabalho com isso todos os dias. Quem diria.</p>\n<p>Eu lembro que aprendi um pouco de HTML na escola, por volta de 1999, e ficava fazendo sites incríveis tipo o gif abaixo:</p>\n<p><img src=\"/e896371a7e308e9c9abee35bb587b61d/my-website.gif\" alt=\"My website\"></p>\n<h2 id=\"the-old-ways\" style=\"position:relative;\"><a href=\"#the-old-ways\" aria-label=\"the old ways permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The old ways</h2>\n<p>Antigamente (na época do Dreamweaver), se eu quisesse fazer um site, eu teria algo assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">- website\r\n  - index.html\r\n  - about.html\r\n  - contact.html</code></pre></div>\n<p>E aí para cada um desses arquivos, eu teria que escrever o HTML completo para aquela página, mesmo se todas elas tivessem o mesmo header ou logo etc. Neste exemplo não há banco de dados, dados dinâmicos e nem compilação, o site é 100% estático, eu posso simplesmente abrir esses arquivos no meu browser localmente e tudo funcionará sem a necessidade de servidores, porque HTML é praticamente um texto com esteróides.</p>\n<p>Claro que isso está longe de ser o ideal, então outras soluções como o PHP surgiram com a possibilidade de deixar as coisas mais dinâmicas.</p>\n<h2 id=\"not-that-old-ways\" style=\"position:relative;\"><a href=\"#not-that-old-ways\" aria-label=\"not that old ways permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Not that old ways</h2>\n<p>Com o PHP, eu posso dividir o meu template de HTML em pedaços reutilizáveis, então eu poderia facilmente inicializar um framework tipo WordPress e me concentrar apenas na criação do conteúdo do site.</p>\n<p>O problema é que o meu browser não entende PHP, então eu preciso de um servidor para converter toda a lógica do PHP em HTML estático, então toda a vez que alguém faz uma solicitação para ver uma página no meu site, a solicitação vai para o meu servidor, que vai processar o código PHP e servir uma página HTML e, claro, isso custa muito mais do que simplesmente servir arquivos HTML estáticos.</p>\n<p>Uma estrutura de arquivos de um site em PHP seria algo assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">- website\r\n      - index.php\r\n      - header.php\r\n      - footer.php\r\n  - content\r\n      - home.php\r\n      - about.php\r\n      - contact.php</code></pre></div>\n<p>É aqui que se encontra a maior parte dos sites agora, e por um bom motivo, a Web 2.0 é complexa e toda esse dinamismo é necessário… pelo menos na maioria dos casos, mas e os sites que quase não mudam, como blogs ou portfólios?</p>\n<h2 id=\"the-new-way---jamstack\" style=\"position:relative;\"><a href=\"#the-new-way---jamstack\" aria-label=\"the new way   jamstack permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The new way - JAMStack</h2>\n<p>JAMStack significa <code class=\"language-text\">JavaScript, API &amp; Markup - Stack</code> e está aqui para trazer o melhor dos velhos tempos para nossas vidas. Com JAMStack eu posso criar meu site da mesma forma que faria usando PHP, mas em vez de ter os dados processados em cada solicitação, eu posso programar o meu site inteiro em módulos, pré-compilá-lo apenas uma vez e depois servi-lo como HTML estático + JavaScript. Isso é muito útil para sites como este, e essa técnica não é nova, todos os nossos aplicativos de desktop são pré-compilados e servidos “estaticamente” - vamos esquecer o SaaS por um segundo, ok?</p>\n<p>Por exemplo, neste site eu tenho um template para uma página de posts do blog e eu preencho esse template com dados vindo de um arquivo Markdown, a estrutura do projeto é algo tipo:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">- website\r\n      - index.html\r\n  - pages\r\n      - home.html\r\n      - contact.html\r\n  - templates\r\n      - blog-posts.html\r\n  - content\r\n      - my-first-post.md\r\n      - my-second-post.md</code></pre></div>\n<p>Eu estou usando o Gatsby para fazer <a href=\"https://pablo.gg/\" target=\"_blank\" rel=\"noreferrer\">esse</a> site, então posso escrever tudo usando componentes React, e o Gatsby compila tudo em um monte de arquivos HTML que são servidos ao navegador.</p>\n<h2 id=\"por-onde-comecar\" style=\"position:relative;\"><a href=\"#por-onde-comecar\" aria-label=\"por onde comecar permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Por onde começar?</h2>\n<p>Antes de testar o Gatsby, eu comecei com o <a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noreferrer\">Jekyll</a>, que é uma forma de <a href=\"https://jekyllrb.com/docs/github-pages/\" target=\"_blank\" rel=\"noreferrer\">criar um blog JAMStack e hospeda-lo gratuitamente no GitHub Pages</a>, era tudo que eu precisava, mas primeiro tive que converter todos os meus 12 anos de posts no WordPress em arquivos Markdown com <a href=\"https://hexo.io/pt-br/docs/front-matter.html\" target=\"_blank\" rel=\"noreferrer\">frontmatter</a>.</p>\n<p>Os posts do WordPress são (geralmente) armazenados em um banco de dados, então preciso extrair esses dados e salvá-los como um arquivo Markdown, e a maneira mais fácil de fazer isso é simplesmente usar um plugin do WordPress, como o <a href=\"https://github.com/benbalter/wordpress-to-jekyll-exporter\" target=\"_blank\" rel=\"noreferrer\">wordpress-to-jekyll-exporter</a>. Se você não tem mais acesso ao seu blog, mas ainda tem o arquivo <code class=\"language-text\">database.sql</code> (como eu 😅) apenas <a href=\"https://imasters.com.br/back-end/instalando-wordpress-em-ambiente-local\" target=\"_blank\" rel=\"noreferrer\">inicialize uma versão local do WordPress</a> para exportar seus posts.</p>\n<p>Eu também criei um <a href=\"https://gist.github.com/blopa/a6e49c798cf0fd5c875025c6ae282064\" target=\"_blank\" rel=\"noreferrer\">script em Python</a> para alterar alguns dados dos arquivos Markdown gerados para atender algumas das minhas necessidades.</p>\n<p>Eu tinha mais de 100 posts no meu blog, então foi uma surpresa para mim, descobrir que <a href=\"https://pages.github.com/versions/\" target=\"_blank\" rel=\"noreferrer\">não tinha como usar o plugin de paginação v2 do Jekyll</a> e fazer o deploy automaticamente no GitHub Pages, então decidi procurar outras soluções.</p>\n<h2 id=\"o-grande-gatsby\" style=\"position:relative;\"><a href=\"#o-grande-gatsby\" aria-label=\"o grande gatsby permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>O Grande Gatsby</h2>\n<p>Como eu já conheço bem React, usar o Gatsby é praticamente um <em>no-brainer</em>, e eles têm uma excelente documentação e muitos plugins e tutoriais e com o lançamento do <a href=\"https://github.com/features/actions\" target=\"_blank\" rel=\"noreferrer\">GitHub Actions</a>, é possível fazer o build e deploy do Gatsby no próprio GitHub sem precisar de serviços externos como <a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noreferrer\">travis-ci.org</a>. Não só isso, mas eu poderia até mesmo ter meu código em um repositório privado e fazer o deploy em outro repositório público, dessa forma eu posso ter posts que são rascunho e que não quero que fiquem públicos.</p>\n<p>Primeiro eu fiz <a href=\"https://github.com/blopa/gatsby-material-ui-starter\" target=\"_blank\" rel=\"noreferrer\">este</a> repositório com base nas instruções <a href=\"https://github.com/mui-org/material-ui/tree/master/examples/gatsby\" target=\"_blank\" rel=\"noreferrer\">deste</a> repositório do Material UI. Tudo o que ele faz é vincular a biblioteca Material UI React ao Gatsby.</p>\n<p>A próxima etapa foi pegar o <a href=\"https://github.com/blopa/gatsby-material-ui-starter\" target=\"_blank\" rel=\"noreferrer\">gatsby-material-ui-starter</a> como base para adicionar toda a lógica do meu blog, mas primeiro eu precisava de uma lista de todos os recursos que eu queria que o meu blog tivesse, e esses eram:</p>\n<ul>\n<li>Página inicial com lista de posts</li>\n<li>Página de blog com lista de posts</li>\n<li>Página de posts do blog com posts relacionados</li>\n<li>Página de arquivo com paginação</li>\n<li>Comentários</li>\n<li>Página de contato</li>\n<li>Página de álbuns com fotos do Google Photos</li>\n<li>Caixa de busca</li>\n<li>SEM SERVIDORES</li>\n</ul>\n<p>Tudo parece bastante razoável até que você lembrar que tudo isso precisa ser feito com JAMStack e sem servidores. Isso é mesmo possível? SIM. Gatsby e React são ferramentas realmente poderosas.</p>\n<h2 id=\"lista-de-posts-e-posts-relacionados\" style=\"position:relative;\"><a href=\"#lista-de-posts-e-posts-relacionados\" aria-label=\"lista de posts e posts relacionados permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lista de posts e posts relacionados</h2>\n<p>O Gatsby fornece uma API de GraphQL bem simples para obter dados dos arquivos Markdown, e isso pode ser feito facilmente usando o plugin <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-transformer-remark\" target=\"_blank\" rel=\"noreferrer\">gatsby-transformer-remark</a> e uma query de GraphQL como a abaixo:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\r\n    query Posts($locale: String) {\r\n        allMarkdownRemark(\r\n            filter: {\r\n                fields: { locale: { eq: $locale } }\r\n                frontmatter: { show: { eq: true } }\r\n            }\r\n            sort: { fields: [frontmatter___date], order: DESC }\r\n        ) {\r\n            edges {\r\n                node {\r\n                    excerpt\r\n                    fields {\r\n                        slug\r\n                        path\r\n                        locale\r\n                    }\r\n                    frontmatter {\r\n                        date\r\n                        title\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Se você quiser saber mais sobre como criar seu próprio blog com o Gatsby do zero, siga <a href=\"https://www.gatsbyjs.com/blog/2017-07-19-creating-a-blog-with-gatsby/\" target=\"_blank\" rel=\"noreferrer\">o tutorial oficial</a>.</p>\n<p>Para os posts relacionados, decidi pegar todos os meus posts e verificar em cada um deles quais outros posts tem as mesmas tags, e então ordena-los por quantidade de tags iguais. Esta pode não ser a maneira eficiente de fazer isso, mas lembre-se de que só estou compilando o site uma vez, então tudo bem 😊</p>\n<h2 id=\"paginacao\" style=\"position:relative;\"><a href=\"#paginacao\" aria-label=\"paginacao permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Paginação</h2>\n<p>O Material UI já tem um <a href=\"https://material-ui.com/components/pagination/\" target=\"_blank\" rel=\"noreferrer\">componente de paginação</a>, então eu criei um template <code class=\"language-text\">Archive.jsx</code> que recebe uma lista de posts, um número total de páginas e o número da página atual e durante o <a href=\"https://www.gatsbyjs.com/docs/reference/config-files/gatsby-node/\" target=\"_blank\" rel=\"noreferrer\">processo de compilação de Gatsby</a>, eu crio várias páginas de arquivo usando o meu template e é isso. Fácil demais.</p>\n<h2 id=\"busca\" style=\"position:relative;\"><a href=\"#busca\" aria-label=\"busca permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Busca</h2>\n<p>Já que o Gatsby usa tecnologias de JavaScript ultra-modernas, criar uma pesquisa local deve ser muito fácil, certo? SIM! Existe até <a href=\"https://github.com/angeloashmore/gatsby-plugin-local-search\" target=\"_blank\" rel=\"noreferrer\">um plugin</a> para isso já! Show!</p>\n<p>Basta seguir <a href=\"https://labs.walltowall.com/easy-client-side-search-for-gatsby-sites/\" target=\"_blank\" rel=\"noreferrer\">esse tutorial</a> e combinar o código com o <a href=\"https://material-ui.com/components/autocomplete/\" target=\"_blank\" rel=\"noreferrer\">componente de autocomplete do Material UI</a> para criar um componente <code class=\"language-text\">SearchBar</code> igual ao desse blog.</p>\n<h2 id=\"integracao-com-google-photos\" style=\"position:relative;\"><a href=\"#integracao-com-google-photos\" aria-label=\"integracao com google photos permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integração com Google Photos</h2>\n<p>A parte ruim do JAMStack é que meu repositório git conterá não apenas todo o meu código-fonte, mas também todos os meus dados de conteúdo, incluindo fotos, etc, e isso acaba deixando o meu repositório muito grande.</p>\n<p>Claro que eu poderia consumir meus dados via uma API externa em vez de arquivos Markdown e isso já vai ajudar um pouco, mas poder não armazenar fotos no repositório vai economizar muito espaço.</p>\n<p>Graças a <a href=\"https://medium.com/@ValentinHervieu/how-i-used-google-photos-to-host-my-website-pictures-gallery-d49f037c8e3c\" target=\"_blank\" rel=\"noreferrer\">este belo post</a> feita pelo <a href=\"https://medium.com/@ValentinHervieu\" target=\"_blank\" rel=\"noreferrer\">@ValentinHervieu</a> podemos ter uma ideia de como obter a URL das imagens de um álbum do Google Photos, eu posso simplesmente seguir esse post e adicionar o código no meu processo de build do Gatsby.</p>\n<h2 id=\"multi-linguas\" style=\"position:relative;\"><a href=\"#multi-linguas\" aria-label=\"multi linguas permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multi-línguas</h2>\n<p>Bom como português é a minha língua nativa, e eu moro fora do Brasil, é útil poder escrever posts em múltiplos idiomas para poder compartilhar com meus amigos aqui e no Brasil, e para isso eu preciso adicionar uma funcionalidade de poder criar posts em línguas diferentes, e óbviamente <a href=\"https://github.com/wiziple/gatsby-plugin-intl\" target=\"_blank\" rel=\"noreferrer\">existe um plugin do Gatsby para isso</a>.</p>\n<p>Esse plugin é baseado no famoso <a href=\"https://formatjs.io/docs/react-intl/\" target=\"_blank\" rel=\"noreferrer\">React Intl</a>, e é bem simples de usar, basta adicionar um novo objeto nas configurações de plugin do Gatsby a passar uma array com os códigos das línguas que você quer adicionar e um path para onde ficarão as traduções para essas línguas. Veja abaixo como é esse objeto para esse blog:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token string\">'gatsby-plugin-intl'</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/src/intl</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token literal-property property\">languages</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pt-br'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token literal-property property\">defaultLanguage</span><span class=\"token operator\">:</span> <span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token literal-property property\">redirectComponent</span><span class=\"token operator\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src/utils/redirect.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>O que isso fará é que sempre que você criar uma página tipo <code class=\"language-text\">/contact/</code>, ele criará uma página para cada um dos idiomas para os quais você configurou, tipo <code class=\"language-text\">/en/contact/</code> e <code class=\"language-text\">/pt-br/contact/</code>. Maneiro! Mas, e os posts do blog? Não quero paths tipo <code class=\"language-text\">/en/hello-world/</code> e <code class=\"language-text\">/pt-br/hello-world/</code>, eu quero <code class=\"language-text\">/en/hello-world/</code> e <code class=\"language-text\">/pt-br/ola-mundo/</code>.</p>\n<p>Para ter o mesmo post em diferentes idiomas, eu crio arquivos de markdown tipo <code class=\"language-text\">hello-world.en.md</code> e <code class=\"language-text\">hello-world.pt-br.md</code> e, em seguida, conecto eles pelo título e a data do post, dessa forma é possível mudar o idioma na página do post e ver o mesmo post em outro idioma.</p>\n<p><img src=\"/2105ea55eebac25b4267be0420fbb6e5/language-switcher.gif\" alt=\"Language switcher\"></p>\n<h2 id=\"pagina-de-contato-e-sistema-de-comentarios\" style=\"position:relative;\"><a href=\"#pagina-de-contato-e-sistema-de-comentarios\" aria-label=\"pagina de contato e sistema de comentarios permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Página de contato e sistema de comentários</h2>\n<p>Existem alguns serviços que oferecem sistemas de comentários para o seu site, como <a href=\"https://disqus.com/\" target=\"_blank\" rel=\"noreferrer\">disqus.com</a> e o <a href=\"https://developers.facebook.com/docs/plugins/comments/\" target=\"_blank\" rel=\"noreferrer\">Facebook Comments</a>, mas o plano gratuito do Disqus adicionará anúncios ao seu site, e o Facebook exigirá que os usuários tenham uma conta no Facebook para usá-lo.</p>\n<p>Depois de um tempo pesquisando eu descobri ser possível usar o <a href=\"https://blog.webjeda.com/google-form-customize/\" target=\"_blank\" rel=\"noreferrer\">Google Forms como um sistema de comentários</a> para o meu blog em JAMStack.</p>\n<p>Os dados dos comentários são armazenados em uma planilha do Google no seu Google Drive, que pode então ser acessada no processo de build do Gatsby para passar todos os comentários para os devidos posts do blog.</p>\n<p>Um problema de usar este sistema é que se eu quiser que os novos comentários apareçam no blog, eu preciso buildar o site todo novamente, mas vamos pensar nisso como um processo para aprovar / desaprovar comentários 😄 e também <a href=\"https://www.gatsbyjs.com/docs/reference/release-notes/v3.0/#incremental-builds-in-oss\" target=\"_blank\" rel=\"noreferrer\">se você configurar o Gatsby direitinho, fazer re-builds não é um grande problema</a>.</p>\n<h2 id=\"github-actions\" style=\"position:relative;\"><a href=\"#github-actions\" aria-label=\"github actions permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub Actions</h2>\n<p>Após programar tudo isso (incluindo algumas gambiarras), tudo o que resta é usar GitHub Actions para fazer o build e o deploy do meu site, e para isso eu simplesmente crio um arquivo <code class=\"language-text\">.github/workflows/deploy.yml</code> no meu repositório do GitHub com as seguintes configurações:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to GitHub Pages\r\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token key atrule\">workflow_dispatch</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token punctuation\">-</span> main\r\n\r\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token key atrule\">build-and-deploy</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\r\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\r\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2.3.4\r\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token key atrule\">persist-credentials</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\r\n\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install and Build 🚧\r\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\r\n          npm cache clean --force\r\n          npm install\r\n          npm run clean\r\n          npm run build</span>\r\n\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy 🚀\r\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> JamesIves/github<span class=\"token punctuation\">-</span>pages<span class=\"token punctuation\">-</span>deploy<span class=\"token punctuation\">-</span>action@4.1.1\r\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token key atrule\">token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.ACCESS_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n          <span class=\"token key atrule\">repository-name</span><span class=\"token punctuation\">:</span> blopa/pablo.gg\r\n          <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> gh<span class=\"token punctuation\">-</span>pages\r\n          <span class=\"token key atrule\">folder</span><span class=\"token punctuation\">:</span> public\r\n          <span class=\"token key atrule\">clean</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\r\n          <span class=\"token key atrule\">single-commit</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>Isso irá buildar o site toda vez que eu commitar no branch <code class=\"language-text\">main</code> e depois fará o deploy no meu repositório público <a href=\"https://github.com/blopa/pablo.gg\" target=\"_blank\" rel=\"noreferrer\">github.com/blopa/pablo.gg</a> para que possa ser acessado via <a href=\"https://pablo.gg/\" target=\"_blank\" rel=\"noreferrer\">https://pablo.gg/</a>.</p>\n<h2 id=\"por-que\" style=\"position:relative;\"><a href=\"#por-que\" aria-label=\"por que permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Por quê?</h2>\n<p>Você pode estar se perguntando “por que você simplesmente não pega um servidor de R$5,00 por mes e roda um WordPress nele?”, e eu digo por que, não é apenas uma questão de economizar dinheiro, mas também é uma coisa a menos com que se preocupar, e se eu morrer ou entrar em coma sei la, meu site ainda estará online - desde que o GitHub Pages ainda exista e seja gratuito. E ao usar o JAMStack você automaticamente diminuirá o poder de processamento usado para servir o seu site, o que também diminuirá as emissões de CO2 e salvará o planeta (ou pelo menos ajudará um pouquinho).</p>\n<h2 id=\"conclusao\" style=\"position:relative;\"><a href=\"#conclusao\" aria-label=\"conclusao permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusão</h2>\n<p>Eu não só aprendi um novo framework em React, mas também criei um blog pessoal ultra leve com custo de hospedagem de R$0,00, e mesmo que o GitHub Actions ou o GitHub Pages deixe de existir um dia, eu posso simplesmente buildar o meu blog localmente e depois hospeda-lo em algum servidor de arquivos estáticos e isso me custaria muito pouco por ano, então yay!</p>\n<p>Claro que eu acabo pagando pelo <a href=\"https://pt.godaddy.com/tlds/gg-domain\" target=\"_blank\" rel=\"noreferrer\">domínio .gg</a>, mas se você quiser ir <em><a href=\"https://pt.wikipedia.org/wiki/Frugalidade\" target=\"_blank\" rel=\"noreferrer\">full frugal</a></em>, você pode simplesmente hospedar o seu site usando domínios gratuitos como o <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noreferrer\">github.io</a> ou o <a href=\"https://freenom.com\" target=\"_blank\" rel=\"noreferrer\">freenom.com</a>.</p>","fields":{"postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTA0LTE3VDAwOjAwOjAwLjAwMFo=","slug":"/2021/2021-04-17-eu-pago-0-em-hospedagem-para-esse-site.pt-br/","path":"/blog/coding/eu-pago-0-em-hospedagem-para-esse-site/","locale":"pt-br"},"rawMarkdownBody":"Quando eu estava na faculdade, web development não era uma parte importante da programação como é hoje, eu não tive uma única aula sobre web e agora trabalho com isso todos os dias. Quem diria.\r\n\r\nEu lembro que aprendi um pouco de HTML na escola, por volta de 1999, e ficava fazendo sites incríveis tipo o gif abaixo:\r\n\r\n![My website](../../uploads/blog/2021/04/my-website.gif)\r\n\r\n## The old ways\r\nAntigamente (na época do Dreamweaver), se eu quisesse fazer um site, eu teria algo assim:\r\n\r\n```shell\r\n- website\r\n  - index.html\r\n  - about.html\r\n  - contact.html\r\n```\r\n\r\nE aí para cada um desses arquivos, eu teria que escrever o HTML completo para aquela página, mesmo se todas elas tivessem o mesmo header ou logo etc. Neste exemplo não há banco de dados, dados dinâmicos e nem compilação, o site é 100% estático, eu posso simplesmente abrir esses arquivos no meu browser localmente e tudo funcionará sem a necessidade de servidores, porque HTML é praticamente um texto com esteróides.\r\n\r\nClaro que isso está longe de ser o ideal, então outras soluções como o PHP surgiram com a possibilidade de deixar as coisas mais dinâmicas.\r\n## Not that old ways\r\n\r\nCom o PHP, eu posso dividir o meu template de HTML em pedaços reutilizáveis, então eu poderia facilmente inicializar um framework tipo WordPress e me concentrar apenas na criação do conteúdo do site.\r\n\r\nO problema é que o meu browser não entende PHP, então eu preciso de um servidor para converter toda a lógica do PHP em HTML estático, então toda a vez que alguém faz uma solicitação para ver uma página no meu site, a solicitação vai para o meu servidor, que vai processar o código PHP e servir uma página HTML e, claro, isso custa muito mais do que simplesmente servir arquivos HTML estáticos.\r\n\r\nUma estrutura de arquivos de um site em PHP seria algo assim:\r\n\r\n```shell\r\n- website\r\n      - index.php\r\n      - header.php\r\n      - footer.php\r\n  - content\r\n      - home.php\r\n      - about.php\r\n      - contact.php\r\n```\r\n\r\nÉ aqui que se encontra a maior parte dos sites agora, e por um bom motivo, a Web 2.0 é complexa e toda esse dinamismo é necessário... pelo menos na maioria dos casos, mas e os sites que quase não mudam, como blogs ou portfólios?\r\n\r\n## The new way - JAMStack\r\nJAMStack significa `JavaScript, API & Markup - Stack` e está aqui para trazer o melhor dos velhos tempos para nossas vidas. Com JAMStack eu posso criar meu site da mesma forma que faria usando PHP, mas em vez de ter os dados processados em cada solicitação, eu posso programar o meu site inteiro em módulos, pré-compilá-lo apenas uma vez e depois servi-lo como HTML estático + JavaScript. Isso é muito útil para sites como este, e essa técnica não é nova, todos os nossos aplicativos de desktop são pré-compilados e servidos \"estaticamente\" - vamos esquecer o SaaS por um segundo, ok?\r\n\r\nPor exemplo, neste site eu tenho um template para uma página de posts do blog e eu preencho esse template com dados vindo de um arquivo Markdown, a estrutura do projeto é algo tipo:\r\n\r\n```shell\r\n- website\r\n      - index.html\r\n  - pages\r\n      - home.html\r\n      - contact.html\r\n  - templates\r\n      - blog-posts.html\r\n  - content\r\n      - my-first-post.md\r\n      - my-second-post.md\r\n```\r\n\r\nEu estou usando o Gatsby para fazer [esse](https://pablo.gg/) site, então posso escrever tudo usando componentes React, e o Gatsby compila tudo em um monte de arquivos HTML que são servidos ao navegador.\r\n\r\n## Por onde começar?\r\nAntes de testar o Gatsby, eu comecei com o [Jekyll](https://jekyllrb.com/), que é uma forma de [criar um blog JAMStack e hospeda-lo gratuitamente no GitHub Pages](https://jekyllrb.com/docs/github-pages/), era tudo que eu precisava, mas primeiro tive que converter todos os meus 12 anos de posts no WordPress em arquivos Markdown com [frontmatter](https://hexo.io/pt-br/docs/front-matter.html).\r\n\r\nOs posts do WordPress são (geralmente) armazenados em um banco de dados, então preciso extrair esses dados e salvá-los como um arquivo Markdown, e a maneira mais fácil de fazer isso é simplesmente usar um plugin do WordPress, como o [wordpress-to-jekyll-exporter](https://github.com/benbalter/wordpress-to-jekyll-exporter). Se você não tem mais acesso ao seu blog, mas ainda tem o arquivo `database.sql` (como eu 😅) apenas [inicialize uma versão local do WordPress](https://imasters.com.br/back-end/instalando-wordpress-em-ambiente-local) para exportar seus posts.\r\n\r\nEu também criei um [script em Python](https://gist.github.com/blopa/a6e49c798cf0fd5c875025c6ae282064) para alterar alguns dados dos arquivos Markdown gerados para atender algumas das minhas necessidades.\r\n\r\nEu tinha mais de 100 posts no meu blog, então foi uma surpresa para mim, descobrir que [não tinha como usar o plugin de paginação v2 do Jekyll](https://pages.github.com/versions/) e fazer o deploy automaticamente no GitHub Pages, então decidi procurar outras soluções.\r\n\r\n## O Grande Gatsby\r\nComo eu já conheço bem React, usar o Gatsby é praticamente um _no-brainer_, e eles têm uma excelente documentação e muitos plugins e tutoriais e com o lançamento do [GitHub Actions](https://github.com/features/actions), é possível fazer o build e deploy do Gatsby no próprio GitHub sem precisar de serviços externos como [travis-ci.org](https://travis-ci.org/). Não só isso, mas eu poderia até mesmo ter meu código em um repositório privado e fazer o deploy em outro repositório público, dessa forma eu posso ter posts que são rascunho e que não quero que fiquem públicos.\r\n\r\nPrimeiro eu fiz [este](https://github.com/blopa/gatsby-material-ui-starter) repositório com base nas instruções [deste](https://github.com/mui-org/material-ui/tree/master/examples/gatsby) repositório do Material UI. Tudo o que ele faz é vincular a biblioteca Material UI React ao Gatsby.\r\n\r\nA próxima etapa foi pegar o [gatsby-material-ui-starter](https://github.com/blopa/gatsby-material-ui-starter) como base para adicionar toda a lógica do meu blog, mas primeiro eu precisava de uma lista de todos os recursos que eu queria que o meu blog tivesse, e esses eram:\r\n\r\n- Página inicial com lista de posts\r\n- Página de blog com lista de posts\r\n- Página de posts do blog com posts relacionados\r\n- Página de arquivo com paginação\r\n- Comentários\r\n- Página de contato\r\n- Página de álbuns com fotos do Google Photos\r\n- Caixa de busca\r\n- SEM SERVIDORES\r\n\r\nTudo parece bastante razoável até que você lembrar que tudo isso precisa ser feito com JAMStack e sem servidores. Isso é mesmo possível? SIM. Gatsby e React são ferramentas realmente poderosas.\r\n\r\n## Lista de posts e posts relacionados\r\nO Gatsby fornece uma API de GraphQL bem simples para obter dados dos arquivos Markdown, e isso pode ser feito facilmente usando o plugin [gatsby-transformer-remark](https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-transformer-remark) e uma query de GraphQL como a abaixo:\r\n\r\n```javascript\r\nexport const pageQuery = graphql`\r\n    query Posts($locale: String) {\r\n        allMarkdownRemark(\r\n            filter: {\r\n                fields: { locale: { eq: $locale } }\r\n                frontmatter: { show: { eq: true } }\r\n            }\r\n            sort: { fields: [frontmatter___date], order: DESC }\r\n        ) {\r\n            edges {\r\n                node {\r\n                    excerpt\r\n                    fields {\r\n                        slug\r\n                        path\r\n                        locale\r\n                    }\r\n                    frontmatter {\r\n                        date\r\n                        title\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n```\r\n\r\nSe você quiser saber mais sobre como criar seu próprio blog com o Gatsby do zero, siga [o tutorial oficial](https://www.gatsbyjs.com/blog/2017-07-19-creating-a-blog-with-gatsby/).\r\n\r\nPara os posts relacionados, decidi pegar todos os meus posts e verificar em cada um deles quais outros posts tem as mesmas tags, e então ordena-los por quantidade de tags iguais. Esta pode não ser a maneira eficiente de fazer isso, mas lembre-se de que só estou compilando o site uma vez, então tudo bem 😊\r\n\r\n## Paginação\r\nO Material UI já tem um [componente de paginação](https://material-ui.com/components/pagination/), então eu criei um template `Archive.jsx` que recebe uma lista de posts, um número total de páginas e o número da página atual e durante o [processo de compilação de Gatsby](https://www.gatsbyjs.com/docs/reference/config-files/gatsby-node/), eu crio várias páginas de arquivo usando o meu template e é isso. Fácil demais.\r\n\r\n## Busca\r\nJá que o Gatsby usa tecnologias de JavaScript ultra-modernas, criar uma pesquisa local deve ser muito fácil, certo? SIM! Existe até [um plugin](https://github.com/angeloashmore/gatsby-plugin-local-search) para isso já! Show!\r\n\r\nBasta seguir [esse tutorial](https://labs.walltowall.com/easy-client-side-search-for-gatsby-sites/) e combinar o código com o [componente de autocomplete do Material UI](https://material-ui.com/components/autocomplete/) para criar um componente `SearchBar` igual ao desse blog.\r\n\r\n## Integração com Google Photos\r\nA parte ruim do JAMStack é que meu repositório git conterá não apenas todo o meu código-fonte, mas também todos os meus dados de conteúdo, incluindo fotos, etc, e isso acaba deixando o meu repositório muito grande.\r\n\r\nClaro que eu poderia consumir meus dados via uma API externa em vez de arquivos Markdown e isso já vai ajudar um pouco, mas poder não armazenar fotos no repositório vai economizar muito espaço.\r\n\r\nGraças a [este belo post](https://medium.com/@ValentinHervieu/how-i-used-google-photos-to-host-my-website-pictures-gallery-d49f037c8e3c) feita pelo [@ValentinHervieu](https://medium.com/@ValentinHervieu) podemos ter uma ideia de como obter a URL das imagens de um álbum do Google Photos, eu posso simplesmente seguir esse post e adicionar o código no meu processo de build do Gatsby.\r\n\r\n## Multi-línguas\r\nBom como português é a minha língua nativa, e eu moro fora do Brasil, é útil poder escrever posts em múltiplos idiomas para poder compartilhar com meus amigos aqui e no Brasil, e para isso eu preciso adicionar uma funcionalidade de poder criar posts em línguas diferentes, e óbviamente [existe um plugin do Gatsby para isso](https://github.com/wiziple/gatsby-plugin-intl).\r\n\r\nEsse plugin é baseado no famoso [React Intl](https://formatjs.io/docs/react-intl/), e é bem simples de usar, basta adicionar um novo objeto nas configurações de plugin do Gatsby a passar uma array com os códigos das línguas que você quer adicionar e um path para onde ficarão as traduções para essas línguas. Veja abaixo como é esse objeto para esse blog:\r\n\r\n```javascript\r\nmodule.exports = {\r\n    ...config,\r\n    plugins: [{\r\n        resolve: 'gatsby-plugin-intl',\r\n        options: {\r\n            path: `${__dirname}/src/intl`,\r\n            languages: ['en', 'pt-br'],\r\n            defaultLanguage: 'en',\r\n            redirect: true,\r\n            redirectComponent: require.resolve('./src/utils/redirect.js'),\r\n        },\r\n    }],\r\n};\r\n```\r\n\r\nO que isso fará é que sempre que você criar uma página tipo `/contact/`, ele criará uma página para cada um dos idiomas para os quais você configurou, tipo `/en/contact/` e `/pt-br/contact/`. Maneiro! Mas, e os posts do blog? Não quero paths tipo `/en/hello-world/` e `/pt-br/hello-world/`, eu quero `/en/hello-world/` e `/pt-br/ola-mundo/`.\r\n\r\nPara ter o mesmo post em diferentes idiomas, eu crio arquivos de markdown tipo `hello-world.en.md` e `hello-world.pt-br.md` e, em seguida, conecto eles pelo título e a data do post, dessa forma é possível mudar o idioma na página do post e ver o mesmo post em outro idioma.\r\n\r\n![Language switcher](../../uploads/blog/2021/04/language-switcher.gif)\r\n\r\n## Página de contato e sistema de comentários\r\nExistem alguns serviços que oferecem sistemas de comentários para o seu site, como [disqus.com](https://disqus.com/) e o [Facebook Comments](https://developers.facebook.com/docs/plugins/comments/), mas o plano gratuito do Disqus adicionará anúncios ao seu site, e o Facebook exigirá que os usuários tenham uma conta no Facebook para usá-lo.\r\n\r\nDepois de um tempo pesquisando eu descobri ser possível usar o [Google Forms como um sistema de comentários](https://blog.webjeda.com/google-form-customize/) para o meu blog em JAMStack.\r\n\r\nOs dados dos comentários são armazenados em uma planilha do Google no seu Google Drive, que pode então ser acessada no processo de build do Gatsby para passar todos os comentários para os devidos posts do blog.\r\n\r\nUm problema de usar este sistema é que se eu quiser que os novos comentários apareçam no blog, eu preciso buildar o site todo novamente, mas vamos pensar nisso como um processo para aprovar / desaprovar comentários 😄 e também [se você configurar o Gatsby direitinho, fazer re-builds não é um grande problema](https://www.gatsbyjs.com/docs/reference/release-notes/v3.0/#incremental-builds-in-oss).\r\n\r\n## GitHub Actions\r\nApós programar tudo isso (incluindo algumas gambiarras), tudo o que resta é usar GitHub Actions para fazer o build e o deploy do meu site, e para isso eu simplesmente crio um arquivo `.github/workflows/deploy.yml` no meu repositório do GitHub com as seguintes configurações:\r\n\r\n```yaml\r\nname: Deploy to GitHub Pages\r\non:\r\n  workflow_dispatch:\r\n  push:\r\n    branches:\r\n      - main\r\n\r\njobs:\r\n  build-and-deploy:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Checkout\r\n        uses: actions/checkout@v2.3.4\r\n        with:\r\n          persist-credentials: false\r\n\r\n      - name: Install and Build 🚧\r\n        run: |\r\n          npm cache clean --force\r\n          npm install\r\n          npm run clean\r\n          npm run build\r\n\r\n      - name: Deploy 🚀\r\n        uses: JamesIves/github-pages-deploy-action@4.1.1\r\n        with:\r\n          token: ${{ secrets.ACCESS_TOKEN }}\r\n          repository-name: blopa/pablo.gg\r\n          branch: gh-pages\r\n          folder: public\r\n          clean: true\r\n          single-commit: true\r\n```\r\n\r\nIsso irá buildar o site toda vez que eu commitar no branch `main` e depois fará o deploy no meu repositório público [github.com/blopa/pablo.gg](https://github.com/blopa/pablo.gg) para que possa ser acessado via [https://pablo.gg/](https://pablo.gg/).\r\n\r\n## Por quê?\r\nVocê pode estar se perguntando \"por que você simplesmente não pega um servidor de R$5,00 por mes e roda um WordPress nele?\", e eu digo por que, não é apenas uma questão de economizar dinheiro, mas também é uma coisa a menos com que se preocupar, e se eu morrer ou entrar em coma sei la, meu site ainda estará online - desde que o GitHub Pages ainda exista e seja gratuito. E ao usar o JAMStack você automaticamente diminuirá o poder de processamento usado para servir o seu site, o que também diminuirá as emissões de CO2 e salvará o planeta (ou pelo menos ajudará um pouquinho).\r\n\r\n## Conclusão\r\nEu não só aprendi um novo framework em React, mas também criei um blog pessoal ultra leve com custo de hospedagem de R$0,00, e mesmo que o GitHub Actions ou o GitHub Pages deixe de existir um dia, eu posso simplesmente buildar o meu blog localmente e depois hospeda-lo em algum servidor de arquivos estáticos e isso me custaria muito pouco por ano, então yay!\r\n\r\nClaro que eu acabo pagando pelo [domínio .gg](https://pt.godaddy.com/tlds/gg-domain), mas se você quiser ir *[full frugal](https://pt.wikipedia.org/wiki/Frugalidade)*, você pode simplesmente hospedar o seu site usando domínios gratuitos como o [github.io](https://pages.github.com/) ou o [freenom.com](https://freenom.com).\r\n","frontmatter":{"tags":["jamstack","javascript","gatsby","reactjs","github","github pages","github actions","frugal","multi-línguas","multi-idiomas","flexsearch","google photos","markdown"],"categories":["coding"],"allowComments":true,"publishOnMedium":false,"cover":null,"date":"2021-04-17T00:00:00.000Z","id":null,"path":"eu-pago-0-em-hospedagem-para-esse-site","show":true,"title":"Eu pago R$0,00 em hospedagem para esse site","hideExcerpt":false,"subtitle":""}},"next":{"excerpt":"Well, this is awkward… It’s been four months since my last…","html":"<p>Well, this is awkward… It’s been four months since my last devlog on the skate platformer game, but you know life is complicated sometimes.</p>\n<p>Today I want to show how I created the pogo-attack with Phaser for my game.</p>\n<p><img src=\"/d9e1edab738bb1d7378e2f71f4b2b23d/pogo-attack.gif\" alt=\"pogo-attack\"></p>\n<p>First we need to check if the hero can perform the attack, and since we’re planning in having some stages where you can’t use your skate, this is the check for the pogo-attack:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Handle hero using down attack</span>\r\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isHeroOnGround</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isDownJustDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canUseSkate\r\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setHeroState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ATTACKING_DOWN_START</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Don't handle any other state</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After setting the proper attacking state, I need to handle the hero moving sideways while performing the attack:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isHeroAttackingDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isHeroOnGround</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isRightDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setHeroState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ATTACKING_DOWN_RIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLeftDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setHeroState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ATTACKING_DOWN_LEFT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setHeroState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ATTACKING_DOWN_START</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then, inside the enemy collider callback function, simply add:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">.</span><span class=\"token function\">isHeroAttackingDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>touching<span class=\"token punctuation\">.</span>down<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    player<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">setVelocityY</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And there you have it, really simple to do and adds a lot of possibilities to the game. See you in the next one!</p>","fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDQtMjRUMDA6MDA6MDAuMDAwWg==","slug":"/2021/2021-04-24-creating-a-pogo-attack-with-phaser-js-game-devlog-17.en/","path":"/blog/games/creating-a-pogo-attack-with-phaser-js-game-devlog-17/","locale":"en"},"rawMarkdownBody":"Well, this is awkward... It's been four months since my last devlog on the skate platformer game, but you know life is complicated sometimes.\r\n\r\nToday I want to show how I created the pogo-attack with Phaser for my game.\r\n\r\n![pogo-attack](../../uploads/blog/2021/04/pogo-attack.gif)\r\n\r\nFirst we need to check if the hero can perform the attack, and since we're planning in having some stages where you can't use your skate, this is the check for the pogo-attack:\r\n\r\n```javascript\r\n// Handle hero using down attack\r\nif (\r\n    !this.isHeroOnGround()\r\n    && this.isDownJustDown()\r\n    && this.canUseSkate\r\n) {\r\n    this.setHeroState(ATTACKING_DOWN_START);\r\n    return; // Don't handle any other state\r\n}\r\n```\r\n\r\nAfter setting the proper attacking state, I need to handle the hero moving sideways while performing the attack:\r\n\r\n```javascript\r\nif (\r\n    this.isHeroAttackingDown()\r\n    && !this.isHeroOnGround()\r\n) {\r\n    if (this.isRightDown()) {\r\n        this.setHeroState(ATTACKING_DOWN_RIGHT);\r\n    } else if (this.isLeftDown()) {\r\n        this.setHeroState(ATTACKING_DOWN_LEFT);\r\n    } else {\r\n        this.setHeroState(ATTACKING_DOWN_START);\r\n    }\r\n\r\n    return;\r\n}\r\n```\r\n\r\nThen, inside the enemy collider callback function, simply add:\r\n\r\n```javascript\r\nif (player.isHeroAttackingDown() && player.body.touching.down) {\r\n    player.body.setVelocityY(-200);\r\n}\r\n```\r\n\r\nAnd there you have it, really simple to do and adds a lot of possibilities to the game. See you in the next one!\r\n","frontmatter":{"tags":["coding","games","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled"],"categories":["games"],"allowComments":true,"publishOnMedium":false,"cover":null,"date":"2021-04-24T00:00:00.000Z","id":null,"path":"creating-a-pogo-attack-with-phaser-js-game-devlog-17","show":true,"title":"Creating a pogo-attack with Phaser JS - Game Devlog #17","hideExcerpt":false,"subtitle":""}},"language":"pt-br","intl":{"language":"pt-br","languages":["en","pt-br"],"messages":{"site_title":"pablo.gg","title":"Título","author":"@thepiratepablo","search_placeholder":"Buscar...","about":"Sobre","photos":"Fotos","archive":"Arquivo","contact":"Contato","close":"Fechar","contact_page":"Página de contato","see_more":"Veja mais posts","built_with":"Feito com ","buy_me_a_soda":"Me pague uma bebida","blog":"Blog","blog_posts":"Posts do blog","go_to_post":"Ir para o post","search":"Busca","loading":"Carregando...","search_results":"Resultados de busca","search_results_for":"{quantity} resultados de busca para: \"{query}\"","search_for_query":"Buscar por \"{query}\"","no_results":"Sem resultados","home":"Home","description":"Apenas mais um blog pessoal","go_back":"Voltar para home","thats_me":"Esse sou eu!","got_it":"Entendi!","check_it_out":"Confira!","we_are":"Faltam","e3":"E3","away_from_next_sgf":"para a Summer Game Fest 2025","away_from_next_gamescom":"para a Gamescom 2024","sgf_countdown":"Contador para Summer Game Fest","gamescom_countdown":"Contador para Gamescom","e3_paragraph_1":"Esta página já contou com uma contagem regressiva para o próximo evento E3, um momento que inúmeros jogadores e profissionais da indústria aguardavam ansiosamente a cada ano. E3 não era apenas um evento; era uma celebração da nossa paixão compartilhada por videogames, um lugar onde sonhos se realizavam e memórias eram feitas.","e3_paragraph_2":"Desde os anúncios eletrizantes até as demos práticas, a E3 era o coração do mundo dos jogos. Ela reunia pessoas de todos os cantos do globo, unidas pelo amor aos jogos. Para muitos, era uma chance de conhecer seus heróis, descobrir novos títulos e experimentar a emoção das últimas inovações em tecnologia de jogos.","e3_paragraph_3":"No entanto, à medida que o cenário dos jogos evoluiu, também evoluiu a maneira como nos conectamos e celebramos nossa paixão. Embora a E3 tenha chegado ao fim, o espírito de excitação e comunidade que ela promoveu continua vivo. Agora esperamos por novas maneiras de nos reunir, compartilhar nosso amor pelos jogos e criar novas memórias.","e3_paragraph_4":"Embora a contagem regressiva tenha acabado, o legado da E3 permanecerá para sempre em nossos corações, nos lembrando das jornadas incríveis que fizemos e dos laços que formamos ao longo do caminho.","sec":"Seg","secs":"Segs","min":"Min","mins":"Mins","hour":"Hora","hours":"Horas","day":"Dia","days":"Dias","month":"Mês","months":"Meses","year":"Ano","years":"Anos","recent_posts":"Posts recentes","email":"E-mail","twitter":"Twitter","name":"Nome","page":"Página","fill_this_want_reply":"Preencha isso se quiser que eu entre em contato com você","sorry_this_post_unavailable_language":"Desculpe, este post não está disponível no idioma que você escolheu","language":"Idioma","comment":"Comentário","comments":"Comentários","no_comments":"Nenhum comentário.","post_comment":"Publicar comentário","send_message":"Enviar mensagem","message":"Mensagem","post_a_comment":"Publicar um comentário","your_comment_submitted":"Seu comentário foi enviado com sucesso.","your_message_submitted":"Sua mensagem foi enviada com sucesso.","on":"em","ok":"Ok","copy":"Copiar","copied":"Copiado","photo_num":"Foto {num}","the_matrix_has_you":"The Matrix has you...","about_paragraph_1":"Entusiasta de tecnologia desde pequeno, sempre me interessei por computadores e videogames.","about_paragraph_2":"Me formei em Tecnologia da Informação na Faculdade Estácio de Sá e sempre procuro me informar sobre novas tecnologias e me envolver em novos projetos de desenvolvimento, alguns deles o código fonte pode ser encontrado no GitHub.","cookie_banner_consent":"Ao usar este site, você concorda com o uso de cookies para oferecer uma melhor experiência.","written_in":"Escrito em ","no_post_this_tag":"Nenhum post em Português contém essa tag.","tags":"Tags","tag_colon":"Tag: ","tags_colon":"Tags: ","posts_tagged":"Posts com a tag ","categories":"Categorias","category":"Categoria","category_colon":"Categoria: ","posts_on_category":"Posts na categoria ","related_posts":"Posts relacionados","read_time":"🕒 {time} min. de leitura","create_post":"Criar Post","show":"Mostrar","date":"Data","download":"Download","add_tag":"Adicionar Tag","hide_excerpt":"Esconder Excerpt","publish_on_medium":"Publicar no Medium","allow_comments":"Permitir Comentários","subtitle":"Subtítulo","you_must_be_truly_desperate":"Você deve estar muito desesperado para me pedir ajuda","game.game_title":"pablo.gg - O Jogo","game.next":"Próxima","game.ok":"Ok","game.loading_asset_colon":"Carregando asset:","game.loading":"Carregando...","game.characters.npc_01":"Frost","game.characters.npc_02":"Gavin","game.characters.npc_03":"Giles","game.characters.npc_04":"Godfrey","game.characters.npc_05":"Hugh","game.characters.npc_06":"Ivar","game.characters.npc_07":"Leopold","game.characters.npc_08":"Lucian","game.characters.npc_09":"Gumercindo","game.characters.npc_10":"Mr. Flower","game.characters.npc_11":"Maxim","game.characters.npc_12":"Milo","game.characters.npc_13":"Otto","game.characters.npc_14":"Palmer","game.characters.npc_15":"Quentin","game.characters.npc_16":"Sebastian","game.characters.npc_17":"Neville","game.characters.npc_18":"Cassian","game.characters.npc_19":"Balthasar","game.characters.sign_01":"Placa","game.characters.book_01":"Livro","game.characters.home_page_city_sign":"Placa","game.characters.coding_category_city_sign_01":"Placa","game.characters.coding_category_city_sign_02":"Placa","game.characters.events_category_city_sign":"Placa","game.characters.funny_category_city_sign":"Placa","game.characters.gadgets_category_city_sign_01":"Placa","game.characters.gadgets_category_city_sign_02":"Placa","game.characters.games_category_city_sign":"Placa","game.characters.general_category_city_sign":"Placa","game.characters.tips_category_city_sign":"Placa","game.characters.toys_category_city_sign":"Placa","game.characters.sword":"Info","game.characters.push":"Info","game.gamepad.a_button":"Botão A","game.gamepad.b_button":"Botão B","game.gamepad.d_pad_left":"D-Pad Esquerda","game.gamepad.d_pad_up":"D-Pad Cima","game.gamepad.d_pad_right":"D-Pad Direita","game.gamepad.d_pad_down":"D-Pad Baixo","game.gamepad.start_button":"Botão Start","game.menu.start":"Começar","game.menu.exit":"Sair","game.menu.settings":"Configurações","game.start_menu.save_game":"Salvar Jogo","game.start_menu.exit":"Sair","game.game_over.game_over":"Game Over","game.game_over.retry":"Tentar Novamente","game.game_over.exit":"Sair","game.browse_posts.choose_a_post":"Escolha um post para ler","game.dialogs.npc_01.01":"Ei, você finalmente acordou!","game.dialogs.npc_01.02":"O quê, você não sabe onde está?","game.dialogs.npc_01.03":"Não seja bobo, você está na Cidade Página Inicial, lembra?","game.dialogs.npc_01.04":"Esta cidade foi fundada por Pablo Montenegro para ser o início de sua jornada","game.dialogs.npc_01.05":"Explore o mundo e encontre outras cidades onde você possa ler o conhecimento acumulado de nossa civilização...","game.dialogs.npc_01.06":"... algumas pessoas chamam de \"Posts do Blog\", não sei por quê...","game.dialogs.npc_02.01":"Tenha cuidado com os Slimes que vivem no mundo aberto.","game.dialogs.npc_02.02":"Pressione ESPAÇO para usar sua espada","game.dialogs.npc_02.03":"O que é ESPAÇO? Eu não faço ideia.","game.dialogs.npc_03.01":"Olá, bem vindo a nossa biblioteca","game.dialogs.npc_03.02":"Temos apenas um livro, que contém todas as publicações da categoria dessa cidade.","game.dialogs.npc_03.03":"Vá dar uma olhada!","game.dialogs.npc_04.01":"Eu gosto de caracóis","game.dialogs.npc_05.01":"Frases incompletas podem causar","game.dialogs.npc_06.01":"O vermelho é mais verde do que o roxo, com certeza.","game.dialogs.npc_07.01":"Ter barba é o novo não ter barba","game.dialogs.npc_08.01":"E aí","game.dialogs.npc_09.01":"\" - Cooper, o que está fazendo?\"\n\" - Atracando.\"","game.dialogs.npc_10.01":"Eu deveria comprar um barco","game.dialogs.npc_11.01":"Conhece a piada do não nem eu? Não? Nem eu!","game.dialogs.npc_12.01":"Eu limpo o banheiro e resgato a princesas, vida boa, certo?","game.dialogs.npc_13.01":"Queremos as ondas de rádio de volta","game.dialogs.npc_14.01":"Salve a líder de torcida, salve o mundo","game.dialogs.npc_15.01":"Olá, como vai?","game.dialogs.npc_15.02":"OK, tchau!","game.dialogs.npc_16.01":"Um canguru é realmente apenas um coelho com esteróides","game.dialogs.npc_17.01":"Pela 216ª vez, ele disse que pararia de beber refrigerante após esta última Coca","game.dialogs.npc_18.01":"Nada e tudo é possímpossivel","game.dialogs.npc_19.01":"Para uma cidade chamada \"Eventos\", não há muito acontecendo...","game.dialogs.sign_01.01":"Parabéns, você pode ler isso!","game.dialogs.book_01.01":"Hey, obrigado por testar esse novo jeito bem esquisito de acessar o meu site","game.dialogs.book_01.02":"Este projeto não seria possível sem o incrível trabalho de muitas pessoas, como:","game.dialogs.book_01.03":"ArMM1998 - Pelos sprites dos personagens e os tilesets","game.dialogs.book_01.04":"PixElthen - Pelos sprites do slime","game.dialogs.book_01.05":"pixelartm - Pelos sprites do chapéu de pirata","game.dialogs.book_01.06":"jkjkke - Pela imagem da tela de Game Over","game.dialogs.book_01.07":"KnoblePersona - Pela imagem da tela do menu inicial","game.dialogs.book_01.08":"Min - Pelo sprite do livro aberto","game.dialogs.book_01.09":"E claro, ao Richard Davey por ter criado o Phaser.io!","game.dialogs.home_page_city_sign":"Cidade Página Inicial","game.dialogs.coding_category_city_sign.01":"Cidade da Categoria Programação","game.dialogs.coding_category_city_sign.02":"Cidade da Categoria Programação","game.dialogs.events_category_city_sign":"Cidade da Categoria Eventos","game.dialogs.funny_category_city_sign":"Cidade da Categoria Engraçado","game.dialogs.gadgets_category_city_sign.01":"Cidade da Categoria Eletrónicos","game.dialogs.gadgets_category_city_sign.02":"Cidade da Categoria Eletrónicos","game.dialogs.games_category_city_sign":"Cidade da Categoria Jogos","game.dialogs.general_category_city_sign":"Cidade da Categoria Geral","game.dialogs.tips_category_city_sign":"Cidade da Categoria Dicas","game.dialogs.toys_category_city_sign":"Cidade da Categoria Brinquedos","game.dialogs.sword_item_description":"Agora você pode atacar, pressione ESPAÇO para usar sua espada.","game.dialogs.push_item_description":"Agora você pode empurrar alguns objetos, pressione ESPAÇO na frente de um objeto para empurrá-lo.","zelda_timeline.title":"Timeline de Zelda","zelda_timeline.timeline_split":"Divisão da Timeline","zelda_timeline.timeline_unification":"Timeline Unificada","zelda_timeline.icons_from":"Os ícones usados nesta página são do zeldauniverse.net e game-icons.net","zelda_timeline.creation":"Criação","zelda_timeline.creation_of_land_sky":"A Criação da Terra e do Céu","zelda_timeline.goddess_hylia_and_sky_era":"Deusa Hylia e a Era do Céu","zelda_timeline.skyward_sword":"Skyward Sword","zelda_timeline.the_ancient_battle":"A Antiga Batalha e a reencarnação da Deusa Hylia","zelda_timeline.return_to_surface":"O retorno à superfície","zelda_timeline.era_of_chaos":"Era do caos","zelda_timeline.sacred_realm_sealed":"O Sacred Realm é selado","zelda_timeline.era_of_prosperity":"Era da Prosperidade","zelda_timeline.establishment_of_hyrule":"O Reino de Hyrule é estabelecido","zelda_timeline.force_era":"Era da Força","zelda_timeline.the_minish_cap":"The Minish Cap","zelda_timeline.rise_of_evil_vaati":"A Ascensão do Maligno Vaati","zelda_timeline.four_swords":"Four Swords","zelda_timeline.resurrection_of_vaati":"A Ressurreição de Vaati","zelda_timeline.era_of_the_hero_of_time":"Era do Herói do Tempo","zelda_timeline.hyrulean_civil_war":"Guerra Civil Hyruleana","zelda_timeline.ocarina_of_time":"Ocarina of Time","zelda_timeline.sacred_realm_becomes_dark_world":"O Sacred Realm se torna o Dark World","zelda_timeline.ganondorf_becomes_ganon":"Ganondorf se torna Ganon","zelda_timeline.hero_is_defeated":"O herói é derrotado","zelda_timeline.decline_of_last_hero":"O declínio de Hyrule e o último herói","zelda_timeline.the_imprisoning_war":"A Guerra do Aprisionamento","zelda_timeline.era_of_dark_and_light":"Era de Luz e Escuridão","zelda_timeline.a_link_to_the_past":"A Link to the Past","zelda_timeline.resurrection_of_ganon":"A Ressurreição de Ganon","zelda_timeline.resurrection_of_ganon_is_prevented":"A ressurreição de Ganon é evitada","zelda_timeline.links_awakening":"Link's Awakening","zelda_timeline.oracle_of_ages_and_seasons":"Oracle of Ages e Oracle of Seasons","zelda_timeline.a_link_between_worlds":"A Link Between Worlds","zelda_timeline.tri_force_heroes":"Tri Force Heroes","zelda_timeline.the_gold_era":"The Gold Era","zelda_timeline.monarchs_of_hyrule_use_triforce":"Os Monarcas de Hyrule usam a Triforce","zelda_timeline.era_of_decline":"A Era do Declínio","zelda_timeline.tragedy_of_princess_zelda_1":"A Tragédia da Princesa Zelda I","zelda_timeline.the_legend_of_zelda":"The Legend of Zelda","zelda_timeline.adventure_of_link":"Adventure of Link","zelda_timeline.hero_defeated":"Hero Derrotado","zelda_timeline.child_era":"Era Infantil","zelda_timeline.adult_era":"Era Adulta","zelda_timeline.sacred_realm_protected":"Sacred Realm está protegido","zelda_timeline.twilight_realm_and_legacy_of_hero":"O Twilight Realm e o legado do Herói","zelda_timeline.majoras_mask":"Majora's Mask","zelda_timeline.prince_of_thieves_is_executed":"O Príncipe dos Ladrões Ganondorf é executado","zelda_timeline.twilight_era":"A Era do Twilight","zelda_timeline.twilight_princess":"Twilight Princess","zelda_timeline.shadow_invasion":"A invasão das sombras","zelda_timeline.shadow_era":"A Era das Sombras","zelda_timeline.four_swords_adventures":"Four Swords Adventures","zelda_timeline.reincarnation_of_ganondorf":"A Reencarnação de Ganondorf","zelda_timeline.ganondorf_is_sealed":"Ganondorf é selado","zelda_timeline.hero_of_wind_and_new_world":"O Herói do Vento e um Novo Mundo","zelda_timeline.era_without_a_hero":"A era sem um herói","zelda_timeline.ganondorf_is_resurrected":"Ganondorf é ressuscitado","zelda_timeline.hyrule_is_sealed_and_flooded":"Hyrule é selado e então inundado","zelda_timeline.era_of_the_great_sea":"A Era do Great Sea","zelda_timeline.the_wind_waker":"The Wind Waker","zelda_timeline.era_of_the_great_voyage":"A Era da Grande Viagem","zelda_timeline.phantom_hourglass":"Phantom Hourglass","zelda_timeline.era_of_hyrule_rebirth":"A Era do Renascimento de Hyrule","zelda_timeline.new_continent_discovered":"Novo continente descoberto","zelda_timeline.new_hyrule_is_founded":"Um novo reino de Hyrule é fundado","zelda_timeline.spirit_tracks":"Spirit Tracks","zelda_timeline.evil_king_malladus_is_resurrected":"O Rei Maligno Malladus é ressuscitado","zelda_timeline.age_of_calamity":"Age of Calamity","zelda_timeline.breath_of_the_wild":"Breath of the Wild","zelda_timeline.era_of_the_wilds":"A Era dos Selvagens","zelda_timeline.calamity_ganon_is_sealed":"Calamity Ganon é Selado. A tecnologia é proibida, levando alguns Sheikah a formar o Yiga Clan","zelda_timeline.divine_beasts_are_cleansed":"As Bestas Divinas são purificadas e Calamity Ganon é Selado","zelda_timeline.tears_of_the_kingdom":"Tears of the Kingdom","zelda_timeline.hyrule_kingdom_is_teared_apart":"Ganondorf é ressuscitado (Será?)","blog_categories.games":"Jogos","blog_categories.general":"Geral","blog_categories.tips":"Dicas","blog_categories.events":"Eventos","blog_categories.coding":"Programação","blog_categories.funny":"Engraçado","blog_categories.toys":"Brinquedos","blog_categories.gadgets":"Eletrónicos","e3_2012_photos.title":"E3 2012","e3_2012_photos.description":"Em junho de 2012 participei da E3 como imprensa para uma cobertura completa para o Nintendo Blast.","e3_2013_photos.title":"E3 2013","e3_2013_photos.description":"Em junho de 2013 participei da E3 como imprensa para uma cobertura completa para o Game Blast.","e3_2014_photos.title":"E3 2014","e3_2014_photos.description":"Em junho de 2014 participei da E3 como imprensa para uma cobertura completa para o Game Blast.","e3_2015_photos.title":"E3 2015","e3_2015_photos.description":"Em junho de 2015 participei da E3 como imprensa para uma cobertura completa para o Game Blast e Game Over TV.","e3_2017_photos.title":"E3 2017","e3_2017_photos.description":"Em junho de 2017 participei da E3 como imprensa para uma cobertura completa para o PlayReplay e Game Over TV.","e3_2019_photos.title":"E3 2019","e3_2019_photos.description":"Em junho de 2019 participei da E3 como imprensa para uma cobertura completa para o PlayReplay.","gamescom_2019_photos.title":"Gamescom 2019","gamescom_2019_photos.description":"Em agosto de 2019 participei da Gamescom como imprensa para uma cobertura completa para o PlayReplay.","san_francisco_2019_photos.title":"San Francisco 2019","san_francisco_2019_photos.description":"Em setembro de 2019, viajei para San Francisco para o show do Metallica S&M2.","forty_two_page.title":"Quarenta e Dois","forty_two_page.description":"Até mais, e obrigado pelos peixes!","projects_page.title":"Projetos","projects_page.description":"Aqui está uma lista de alguns dos meus projetos pessoais favoritos.","projects_page.gatsbyMaterialUiBlogDescription":"Um simples Gatsby Blog Starter com Material UI.","projects_page.contractBuilderDescription":"O Contract Builder é um projeto de código aberto gratuito que permite a qualquer pessoa manter e construir facilmente qualquer tipo de contrato (documentos legais, processos judiciais, aluguel, acordos, construção e assim por diante) usando o Google Spreadsheets. Este foi desenvolvido como um projeto pessoal para ajudar uma amiga que estava com dificuldades de gastar até uma hora para fazer um contrato personalizado, agora ela consegue fazer em menos de 5 minutos. Hooray!","projects_page.resumeBuilderDescription":"Resume Builder é um projeto de código aberto gratuito que permite a qualquer pessoa manter e construir facilmente qualquer tipo de currículo usando o Google Spreadsheets. Este foi desenvolvido como um projeto pessoal para ajudar um amigo que estava com dificuldades de gastar até uma hora para fazer um currículo personalizado.","projects_page.magentoChatbotDescription":"Com este módulo, você pode integrar totalmente a sua loja Magento com os aplicativos de chat mais populares do mercado. Isso significa que simplesmente instalando este módulo e alguns cliques você pode ter uma nova forma de mostrar e vender seus produtos aos seus clientes. Muito fácil de usar! Experimente agora, é GRÁTIS.","projects_page.jamStackSortenerDescription":"Este é um POC de um encurtador de URL básico desenvolvido com Gatsby.","projects_page.gotinhaDescription":"Sempre foi meu sonho fazer meu próprio jogo, e depois de experimentar o Unity alguns anos atrás, decidi tentar novamente com algo com o qual estou mais familiarizado: Javascript. Como desenvolvedor front-end, Javascript já é a linguagem com a qual escrevo a maior parte do meu código no trabalho e também em meus projetos pessoais, e após uma rápida pesquisa consegui encontrar o incrível PhaserJS Framework para construção de jogos web 2D.","notfound.title":"404: Não encontrado","notfound.header":"404 NÃO ENCONTRADO","notfound.description":"Desculpe, esta página parece não existir. Talvez os arquivos estejam incompletos?","seo_keywords.developer":"desenvolvedor","seo_keywords.development":"desenvolvimento","seo_keywords.javascript":"javascript","seo_keywords.es6":"es6","seo_keywords.e3":"e3","seo_keywords.sgf":"sgf","seo_keywords.gamescom":"gamescom","seo_keywords.countdown":"contador","seo_keywords.archive":"arquivo","seo_keywords.about_me":"sobre mim","seo_keywords.personal_blog":"blog pessoal","seo_keywords.personal_projects":"projetos pessoais","seo_keywords.travels":"viagens","seo_keywords.tips":"dicas","seo_keywords.lifehacks":"truques de produtividade","seo_keywords.reviews":"analises","seo_keywords.games":"games","seo_keywords.timeline":"linha do tempo","seo_keywords.photos":"fotos","cookie_law.we_use_cookies":"Usamos cookies para garantir que você obtenha a melhor experiência em nosso site. Ao usar nosso site, você concorda com nossa ","cookie_law.title":"Política de cookies","cookie_law.what_are_cookies":"O que são cookies?","cookie_law.what_are_cookies_text":"Como é prática comum em quase todos os sites profissionais, este site usa cookies, que são pequenos arquivos baixados para o seu computador, para melhorar a sua experiência. Esta página descreve quais informações eles coletam, como as usamos e por que às vezes precisamos armazenar esses cookies. Também compartilharemos como você pode evitar que esses cookies sejam armazenados, no entanto, isso pode diminuir ou 'quebrar' certos elementos da funcionalidade do site. Para obter mais informações gerais sobre cookies, leia ","cookie_law.what_are_cookies_more_info_url":"https://pt.wikipedia.org/wiki/Cookie_(informática)","cookie_law.how_we_use_cookies":"Como usamos cookies","cookie_law.how_we_use_cookies_text":"Usamos cookies por vários motivos detalhados abaixo. Infelizmente, na maioria dos casos, não há opções padrão da indústria para desabilitar cookies sem desabilitar completamente a funcionalidade e os recursos que eles adicionam a este site. Recomenda-se que você deixe todos os cookies se não tiver certeza se precisa deles ou não, caso sejam usados para fornecer um serviço que você usa.","cookie_law.disabling_cookies":"Desativando cookies","cookie_law.disabling_cookies_text":"Você pode impedir a configuração de cookies ajustando as configurações do seu navegador (consulte a Ajuda do navegador para saber como fazer isso). Esteja ciente de que a desativação de cookies afetará a funcionalidade deste e de muitos outros sites que você visita. A desativação dos cookies normalmente resultará na desativação de certas funcionalidades e recursos deste site. Portanto, é recomendável que você não desative os cookies.","cookie_law.the_cookies_we_set":"Os cookies que definimos","cookie_law.site_preferences_cookie":"Cookies de preferências do site","cookie_law.site_preferences_cookie_text":"Para lhe proporcionar uma excelente experiência neste site, fornecemos a funcionalidade para definir as suas preferências de funcionamento deste site quando o utiliza. Para lembrar suas preferências, precisamos definir cookies para que essas informações possam ser chamadas sempre que você interagir com uma página afetada por suas preferências.","cookie_law.third_party_cookies":"Cookies de terceiros","cookie_law.third_party_cookies_text":"Em alguns casos especiais, também usamos cookies fornecidos por terceiros confiáveis. A seção a seguir detalha quais cookies de terceiros você pode encontrar neste site.","cookie_law.third_party_cookies_item_1":"Este site usa o Google Analytics, que é uma das soluções de análise mais difundidas e confiáveis na web para nos ajudar a entender como você usa o site e como podemos melhorar sua experiência. Esses cookies podem rastrear coisas como quanto tempo você passa no site e as páginas que você visita para que possamos continuar a produzir conteúdo envolvente. Para obter mais informações sobre os cookies do Google Analytics, consulte a página oficial do Google Analytics.","cookie_law.third_party_cookies_item_2":"De vez em quando, testamos novos recursos e fazemos mudanças sutis na maneira como o site é fornecido. Quando ainda estamos testando novos recursos, esses cookies podem ser usados para garantir que você receba uma experiência consistente enquanto estiver no site, garantindo que entendemos quais otimizações nossos usuários mais apreciam.","cookie_law.more_information":"Mais informações","cookie_law.more_information_text":"Esperamos que isso tenha esclarecido as coisas para você e, conforme mencionado anteriormente, se há algo que você não tem certeza se precisa ou não, geralmente é mais seguro deixar os cookies ativados, caso eles interajam com um dos recursos que você usa em nosso site. No entanto, se você ainda estiver procurando por mais informações, entre em contato conosco através de nossa "},"routed":true,"originalPath":"/blog/games/criando-um-pogo-attack-com-o-phaser-js-game-devlog-17/","redirect":true,"redirectDefaultLanguageToRoot":false,"defaultLanguage":"en","fallbackLanguage":"","ignoredPaths":[]},"blogLocale":"pt-br"}},
    "staticQueryHashes": ["1156153307","1355482417","1591365477","1628619374","2127381735","2288279559","26159077","3566410298","3649515864","3847325417","3982724423","928834867"]}