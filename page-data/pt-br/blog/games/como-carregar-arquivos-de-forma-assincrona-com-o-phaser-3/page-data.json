{
    "componentChunkName": "component---src-templates-blog-post-jsx",
    "path": "/pt-br/blog/games/como-carregar-arquivos-de-forma-assincrona-com-o-phaser-3/",
    "result": {"data":{"site":{"siteMetadata":{"siteUrl":"https://pablo.gg"}},"markdownRemark":{"id":"8818e12d-4961-515e-9c43-9d97acdb21de","excerpt":"No Phaser 3, é possível pré-carregar os assets do jogo na função , para eles estarem prontos para uso quando a função  iniciar. Mas e se você precisar esperar…","html":"<p>No Phaser 3, é possível pré-carregar os assets do jogo na função <code class=\"language-text\">preload</code>, para eles estarem prontos para uso quando a função <code class=\"language-text\">create</code> iniciar. Mas e se você precisar esperar por um request de uma API antes de carregar um asset?</p>\n<p>Infelizmente, não é possível fazer com que a função <code class=\"language-text\">preload</code> seja <code class=\"language-text\">async</code> para forçá-la a esperar por funções assincronias, mas existem maneiras de contornar isso.</p>\n<h2 id=\"usando-o-rex-await-loader-plugin\" style=\"position:relative;\"><a href=\"#usando-o-rex-await-loader-plugin\" aria-label=\"usando o rex await loader plugin permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usando o Rex Await Loader Plugin</h2>\n<p><a href=\"https://github.com/rexrainbow\" target=\"_blank\" rel=\"noreferrer\">rexrainbow</a> é um grande desenvolvedor que traz muito para a comunidade Phaser, como um site <a href=\"https://rexrainbow.github.io/phaser3-rex-notes/docs/site/\" target=\"_blank\" rel=\"noreferrer\">cheio de exemplos de Phaser</a> e um monte de ótimos <a href=\"https://github.com/rexrainbow/phaser4-rex-plugins\" target=\"_blank\" rel=\"noreferrer\">plugins para o Phaser</a>.</p>\n<p>O <a href=\"https://rexrainbow.github.io/phaser3-rex-notes/docs/site/awaitloader/\" target=\"_blank\" rel=\"noreferrer\">Rex Await Loader Plugin</a> pode ser carregado no contexto global do jogo, basta adiciona-lo no atributo <code class=\"language-text\">plugins</code> na configuração do Phaser.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> AwaitLoaderPlugin <span class=\"token keyword\">from</span> <span class=\"token string\">'phaser3-rex-plugins/plugins/awaitloader-plugin.js'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> game <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Phaser<span class=\"token punctuation\">.</span>Game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token literal-property property\">global</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n            <span class=\"token punctuation\">{</span>\r\n                <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'rexAwaitLoader'</span><span class=\"token punctuation\">,</span>\r\n                <span class=\"token literal-property property\">plugin</span><span class=\"token operator\">:</span> AwaitLoaderPlugin<span class=\"token punctuation\">,</span>\r\n                <span class=\"token literal-property property\">start</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Então na função <code class=\"language-text\">preload</code> da game scene:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/image.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">rexAwait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">successCallback<span class=\"token punctuation\">,</span> failureCallback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token comment\">// do stuff then call the success callback</span>\r\n            <span class=\"token function\">successCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/image2.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"usando-o-phaser-loader\" style=\"position:relative;\"><a href=\"#usando-o-phaser-loader\" aria-label=\"usando o phaser loader permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usando o Phaser Loader</h2>\n<p>Para evitar o carregamento de plugins externos, também existe a opção de usar o Phaser Loader nativo, conforme <a href=\"https://phaser.discourse.group/t/loading-audio/1306/4\" target=\"_blank\" rel=\"noreferrer\">descrito pelo usuário yannick</a> no <a href=\"https://phaser.discourse.group\" target=\"_blank\" rel=\"noreferrer\">Discourse do Phaser</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">asyncLoader</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">loaderPlugin</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        loaderPlugin<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'filecomplete'</span><span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loaderror'</span><span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        loaderPlugin<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doStuff</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">await</span> <span class=\"token function\">asyncLoader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/image2.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/image.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">doStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/image3.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>E é isso, caso esse post tenha sido de alguma forma útil para você, não esqueça de deixar um comentário.</p>","fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMTEtMThUMDA6MDA6MDAuMDAwWg==","slug":"/2021/2021-11-18-como-carregar-arquivos-de-forma-assincrona-com-o-phaser-3.pt-br/","path":"/blog/games/como-carregar-arquivos-de-forma-assincrona-com-o-phaser-3/","locale":"pt-br"},"readingTime":{"minutes":1.38},"frontmatter":{"path":"como-carregar-arquivos-de-forma-assincrona-com-o-phaser-3","allowComments":true,"title":"Como carregar arquivos de forma assíncrona com o Phaser 3","date":"2021-11-18T00:00:00.000Z","categories":["games"],"tags":["programação","jogos","javascript","phaser","phaser 3","assincrono","rexrainbow","phaser loader"],"hideExcerpt":false,"subtitle":""}},"categoryImage":{"childImageSharp":{"original":{"width":1920,"height":1080,"src":"/static/categories_games-45dce0594b4828053338793f21283cda.jpg"}}}},"pageContext":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMTEtMThUMDA6MDA6MDAuMDAwWg==","relatedPosts":[{"fields":{"postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTEwLTEyVDAwOjAwOjAwLjAwMFo=","slug":"/2021/2021-10-12-eu-criei-um-jogo-para-acessar-o-conteudo-do-meu-blog-com-phaser-e-react.pt-br/","path":"/blog/coding/eu-criei-um-jogo-para-acessar-o-conteudo-do-meu-blog-com-phaser-e-react/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","react","blog","rpg","rpg maker","top-down"],"categories":["coding"],"allowComments":true,"publishOnMedium":null,"cover":null,"date":"2021-10-12T00:00:00.000Z","id":null,"path":"eu-criei-um-jogo-para-acessar-o-conteudo-do-meu-blog-com-phaser-e-react","show":true,"title":"Eu criei um jogo para o acessar o conteúdo do meu blog com Phaser e React","hideExcerpt":null,"subtitle":"Aprenda a criar um jogo de RPG de cima para baixo usando Phaser e React, incluindo integração com Gatsby e criação do mapa do jogo com Tiled"}},{"fields":{"postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTEwLTA4VDAwOjAwOjAwLjAwMFo=","slug":"/2021/2021-10-08-como-criar-um-jogo-estilo-rpg-maker-com-phaser-e-react.pt-br/","path":"/blog/coding/como-criar-um-jogo-estilo-rpg-maker-com-phaser-e-react/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","react","dialog box","rpg","rpg maker"],"categories":["coding"],"allowComments":true,"publishOnMedium":null,"cover":null,"date":"2021-10-08T00:00:00.000Z","id":null,"path":"como-criar-um-jogo-estilo-rpg-maker-com-phaser-e-react","show":true,"title":"Como criar um jogo estilo RPG Maker com Phaser e React","hideExcerpt":null,"subtitle":null}},{"fields":{"postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTEwLTA2VDAwOjAwOjAwLjAwMFo=","slug":"/2021/2021-10-06-criando-uma-caixa-de-dialogo-com-react-para-o-meu-jogo-em-phaser.pt-br/","path":"/blog/coding/criando-uma-caixa-de-dialogo-com-react-para-o-meu-jogo-em-phaser/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","react","dialog box","rpg","rpg maker","material ui"],"categories":["coding"],"allowComments":true,"publishOnMedium":null,"cover":null,"date":"2021-10-06T00:00:00.000Z","id":null,"path":"criando-uma-caixa-de-dialogo-com-react-para-o-meu-jogo-em-phaser","show":true,"title":"Criando uma caixa de diálogo com React para o meu jogo em Phaser","hideExcerpt":null,"subtitle":null}},{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMTAtMDJUMDA6MDA6MDAuMDAwWg==","slug":"/2021/2021-10-02-atualize-automaticamente-o-tileset-embutido-do-seu-mapa-no-tiled-com-um-script-nodejs.pt-br/","path":"/blog/games/atualize-automaticamente-o-tileset-embutido-do-seu-mapa-no-tiled-com-um-script-nodejs/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","nodejs","node","tiled","mapa","tilemap","tileset"],"categories":["games"],"allowComments":true,"publishOnMedium":null,"cover":null,"date":"2021-10-02T00:00:00.000Z","id":null,"path":"atualize-automaticamente-o-tileset-embutido-do-seu-mapa-no-tiled-com-um-script-nodejs","show":true,"title":"Atualize automaticamente o Tileset embutido do seu mapa no Tiled com um script Node.js.","hideExcerpt":null,"subtitle":null}},{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDktMDlUMDA6MDA6MDAuMDAwWg==","slug":"/2021/2021-09-09-criando-um-build-para-celular-para-o-meu-jogo-com-o-phaser-js-game-devlog-23.pt-br/","path":"/blog/games/criando-um-build-para-celular-para-o-meu-jogo-com-o-phaser-js-game-devlog-23/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled","celular","android","build para celular"],"categories":["games"],"allowComments":true,"publishOnMedium":false,"cover":null,"date":"2021-09-09T00:00:00.000Z","id":null,"path":"criando-um-build-para-celular-para-o-meu-jogo-com-o-phaser-js-game-devlog-23","show":true,"title":"Criando um build para celular para o meu jogo com o Phaser JS - Game Devlog #23","hideExcerpt":false,"subtitle":""}},{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDgtMjhUMDA6MDA6MDAuMDAwWg==","slug":"/2021/2021-08-28-criando-plataformas-para-o-meu-jogo-em-phaser-js-game-devlog-22.pt-br/","path":"/blog/games/criando-plataformas-para-o-meu-jogo-em-phaser-js-game-devlog-22/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled","plataformas"],"categories":["games"],"allowComments":true,"publishOnMedium":false,"cover":null,"date":"2021-08-28T00:00:00.000Z","id":null,"path":"criando-plataformas-para-o-meu-jogo-em-phaser-js-game-devlog-22","show":true,"title":"Criando plataformas para o meu jogo em Phaser JS - Game Devlog #22","hideExcerpt":false,"subtitle":""}},{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDctMDZUMDA6MDA6MDAuMDAwWg==","slug":"/2021/2021-07-06-escondendo-partes-do-mapa-com-o-phaser-js-game-devlog-21.pt-br/","path":"/blog/games/escondendo-partes-do-mapa-com-o-phaser-js-game-devlog-21/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled","metroidvania"],"categories":["games"],"allowComments":true,"publishOnMedium":null,"cover":null,"date":"2021-07-06T00:00:00.000Z","id":null,"path":"escondendo-partes-do-mapa-com-o-phaser-js-game-devlog-21","show":true,"title":"Escondendo partes do mapa com o Phaser JS - Game Devlog #21","hideExcerpt":null,"subtitle":null}},{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDYtMjhUMDA6MDA6MDAuMDAwWg==","slug":"/2021/2021-06-28-criando-estalactites-que-caem-com-phaser-js-game-devlog-20.pt-br/","path":"/blog/games/criando-estalactites-que-caem-com-phaser-js-game-devlog-20/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled"],"categories":["games"],"allowComments":true,"publishOnMedium":null,"cover":null,"date":"2021-06-28T00:00:00.000Z","id":null,"path":"criando-estalactites-que-caem-com-phaser-js-game-devlog-20","show":true,"title":"Criando estalactites que caem com Phaser JS - Game Devlog #20","hideExcerpt":null,"subtitle":null}},{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDYtMjJUMDA6MDA6MDAuMDAwWg==","slug":"/2021/2021-06-22-como-gerar-sprite-sheets-automaticamente-para-o-seu-jogo-feito-com-phaser-js.pt-br/","path":"/blog/games/como-gerar-sprite-sheets-automaticamente-para-o-seu-jogo-feito-com-phaser-js/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","nodejs","node","atlas","sprite sheet"],"categories":["games"],"allowComments":true,"publishOnMedium":null,"cover":null,"date":"2021-06-22T00:00:00.000Z","id":null,"path":"como-gerar-sprite-sheets-automaticamente-para-o-seu-jogo-feito-com-phaser-js","show":true,"title":"Como gerar sprite sheets automaticamente para o seu jogo feito com Phaser JS","hideExcerpt":null,"subtitle":null}},{"fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDYtMTlUMDA6MDA6MDAuMDAwWg==","slug":"/2021/2021-06-19-criando-uma-monkey-bar-para-se-pendurar-com-o-phaser-js-game-devlog-19.pt-br/","path":"/blog/games/criando-uma-monkey-bar-para-se-pendurar-com-o-phaser-js-game-devlog-19/","locale":"pt-br"},"frontmatter":{"tags":["programação","jogos","javascript","phaser","phaser 3","game devlog","gamedev","skate platformer","super ollie vs pebble corp","webpack","tiled","monkey bar"],"categories":["games"],"allowComments":true,"publishOnMedium":null,"cover":null,"date":"2021-06-19T00:00:00.000Z","id":null,"path":"criando-uma-monkey-bar-para-se-pendurar-com-o-phaser-js-game-devlog-19","show":true,"title":"Criando uma \"Monkey Bar\" para se pendurar com o Phaser JS - Game Devlog #19","hideExcerpt":null,"subtitle":null}}],"alternativeHtml":"<p>No Phaser 3, é possível pré-carregar os assets do jogo na função <code class=\"language-text\">preload</code>, para eles estarem prontos para uso quando a função <code class=\"language-text\">create</code> iniciar. Mas e se você precisar esperar por um request de uma API antes de carregar um asset?</p>\n<p>Infelizmente, não é possível fazer com que a função <code class=\"language-text\">preload</code> seja <code class=\"language-text\">async</code> para forçá-la a esperar por funções assincronias, mas existem maneiras de contornar isso.</p>\n<h2 id=\"usando-o-rex-await-loader-plugin\" style=\"position:relative;\"><a href=\"#usando-o-rex-await-loader-plugin\" aria-label=\"usando o rex await loader plugin permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usando o Rex Await Loader Plugin</h2>\n<p><a href=\"https://github.com/rexrainbow\" target=\"_blank\" rel=\"noreferrer\">rexrainbow</a> é um grande desenvolvedor que traz muito para a comunidade Phaser, como um site <a href=\"https://rexrainbow.github.io/phaser3-rex-notes/docs/site/\" target=\"_blank\" rel=\"noreferrer\">cheio de exemplos de Phaser</a> e um monte de ótimos <a href=\"https://github.com/rexrainbow/phaser4-rex-plugins\" target=\"_blank\" rel=\"noreferrer\">plugins para o Phaser</a>.</p>\n<p>O <a href=\"https://rexrainbow.github.io/phaser3-rex-notes/docs/site/awaitloader/\" target=\"_blank\" rel=\"noreferrer\">Rex Await Loader Plugin</a> pode ser carregado no contexto global do jogo, basta adiciona-lo no atributo <code class=\"language-text\">plugins</code> na configuração do Phaser.</p>\n<div class=\"copy-code-block\"><button tabindex=\"0\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copiar</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> AwaitLoaderPlugin <span class=\"token keyword\">from</span> <span class=\"token string\">'phaser3-rex-plugins/plugins/awaitloader-plugin.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> game <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Phaser<span class=\"token punctuation\">.</span>Game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">global</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'rexAwaitLoader'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">plugin</span><span class=\"token operator\">:</span> AwaitLoaderPlugin<span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">start</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>Então na função <code class=\"language-text\">preload</code> da game scene:</p>\n<div class=\"copy-code-block\"><button tabindex=\"1\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copiar</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/image.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">rexAwait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">successCallback<span class=\"token punctuation\">,</span> failureCallback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// do stuff then call the success callback</span>\n            <span class=\"token function\">successCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/image2.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<h2 id=\"usando-o-phaser-loader\" style=\"position:relative;\"><a href=\"#usando-o-phaser-loader\" aria-label=\"usando o phaser loader permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Usando o Phaser Loader</h2>\n<p>Para evitar o carregamento de plugins externos, também existe a opção de usar o Phaser Loader nativo, conforme <a href=\"https://phaser.discourse.group/t/loading-audio/1306/4\" target=\"_blank\" rel=\"noreferrer\">descrito pelo usuário yannick</a> no <a href=\"https://phaser.discourse.group\" target=\"_blank\" rel=\"noreferrer\">Discourse do Phaser</a>.</p>\n<div class=\"copy-code-block\"><button tabindex=\"2\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copiar</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">asyncLoader</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">loaderPlugin</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        loaderPlugin<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'filecomplete'</span><span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loaderror'</span><span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        loaderPlugin<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doStuff</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">asyncLoader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/image2.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/image.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">doStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/image3.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>E é isso, caso esse post tenha sido de alguma forma útil para você, não esqueça de deixar um comentário.</p>","otherLanguagesUrl":["/en/blog/games/how-to-load-assets-asynchronously-with-phaser-3/"],"rss":{"title":"Como carregar arquivos de forma assíncrona com o Phaser 3","description":"Como carregar arquivos de forma assíncrona com o Phaser 3","date":"2021-11-18T00:00:00.000Z"},"images":["/static/como-carregar-arquivos-de-forma-assincrona-com-o-phaser-3-23e48d7e94721bd2dca8e920c3a2e292.png"],"videos":[],"comments":[],"googleFormData":{"fvv":1,"pageHistory":0,"fbzx":"5566947645549549202","action":"e/1FAIpQLSeST_0jBnLKkEkXGpyx9LWrvV2a1-1F5dr-AcA4wn0BSRyPCw","title":"blog_comment","description":null,"fields":[{"label":"name","description":null,"type":"SHORT_ANSWER","id":"1953327618","required":true},{"label":"email","description":null,"type":"SHORT_ANSWER","id":"1309141965","required":false},{"label":"twitter","description":null,"type":"SHORT_ANSWER","id":"740186305","required":false},{"label":"comment","description":null,"type":"LONG_ANSWER","id":"1663940054","required":true},{"label":"post_path","description":null,"type":"SHORT_ANSWER","id":"1852628638","required":true}],"fieldsOrder":{"740186305":2,"1309141965":1,"1663940054":3,"1852628638":4,"1953327618":0}},"pageType":"blogPost","categoryImage":"/categories_games.jpg/","slug":"/2021/2021-11-18-como-carregar-arquivos-de-forma-assincrona-com-o-phaser-3.pt-br/","locale":"pt-br","title":"Como carregar arquivos de forma assíncrona com o Phaser 3","previous":{"excerpt":"On Phaser 3 you can pre-load your assets in a function…","html":"<p>On Phaser 3 you can pre-load your assets in a function called <code class=\"language-text\">preload</code> so they are ready to use when the function <code class=\"language-text\">create</code> starts. But what if you need to wait for an API request before loading an asset?</p>\n<p>Unfortunately, you can’t simply make the <code class=\"language-text\">preload</code> function an <code class=\"language-text\">async</code> function and force it to wait for your API calls, but there are ways around it.</p>\n<h2 id=\"using-the-rex-await-loader-plugin\" style=\"position:relative;\"><a href=\"#using-the-rex-await-loader-plugin\" aria-label=\"using the rex await loader plugin permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using the Rex Await Loader Plugin</h2>\n<p><a href=\"https://github.com/rexrainbow\" target=\"_blank\" rel=\"noreferrer\">rexrainbow</a> is a great developer that brings a lot to the Phaser community, with a <a href=\"https://rexrainbow.github.io/phaser3-rex-notes/docs/site/\" target=\"_blank\" rel=\"noreferrer\">documentation website full of Phaser examples</a> and a bunch of great <a href=\"https://github.com/rexrainbow/phaser4-rex-plugins\" target=\"_blank\" rel=\"noreferrer\">Phaser plugins</a>.</p>\n<p>The <a href=\"https://rexrainbow.github.io/phaser3-rex-notes/docs/site/awaitloader/\" target=\"_blank\" rel=\"noreferrer\">Rex Await Loader Plugin</a> can be loaded in the global game context by adding it to the <code class=\"language-text\">plugins</code> attribute in the Phaser config.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> AwaitLoaderPlugin <span class=\"token keyword\">from</span> <span class=\"token string\">'phaser3-rex-plugins/plugins/awaitloader-plugin.js'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> game <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Phaser<span class=\"token punctuation\">.</span>Game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span>\r\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token literal-property property\">global</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n            <span class=\"token punctuation\">{</span>\r\n                <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'rexAwaitLoader'</span><span class=\"token punctuation\">,</span>\r\n                <span class=\"token literal-property property\">plugin</span><span class=\"token operator\">:</span> AwaitLoaderPlugin<span class=\"token punctuation\">,</span>\r\n                <span class=\"token literal-property property\">start</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then in the <code class=\"language-text\">preload</code> scene:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/image.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">rexAwait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">successCallback<span class=\"token punctuation\">,</span> failureCallback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token comment\">// do stuff then call the success callback</span>\r\n            <span class=\"token function\">successCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/image2.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"using-the-native-phaser-loader\" style=\"position:relative;\"><a href=\"#using-the-native-phaser-loader\" aria-label=\"using the native phaser loader permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using the native Phaser Loader</h2>\n<p>To avoid loading external plugins, there is also an option to use the native Phaser Loader, as <a href=\"https://phaser.discourse.group/t/loading-audio/1306/4\" target=\"_blank\" rel=\"noreferrer\">described by yannick</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">asyncLoader</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">loaderPlugin</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        loaderPlugin<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'filecomplete'</span><span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loaderror'</span><span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        loaderPlugin<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doStuff</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">await</span> <span class=\"token function\">asyncLoader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/image2.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/image.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">doStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'path/to/image3.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I don’t know how to conclude this post so there you go, I hope this will be useful for someone out there in the internet. If this helped you in any way, don’t forget to leave a comment.</p>","fields":{"postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMTEtMThUMDA6MDA6MDAuMDAwWg==","slug":"/2021/2021-11-18-how-to-load-assets-asynchronously-with-phaser-3.en/","path":"/blog/games/how-to-load-assets-asynchronously-with-phaser-3/","locale":"en"},"rawMarkdownBody":"On Phaser 3 you can pre-load your assets in a function called `preload` so they are ready to use when the function `create` starts. But what if you need to wait for an API request before loading an asset?\r\n\r\nUnfortunately, you can't simply make the `preload` function an `async` function and force it to wait for your API calls, but there are ways around it.\r\n\r\n## Using the Rex Await Loader Plugin\r\n[rexrainbow](https://github.com/rexrainbow) is a great developer that brings a lot to the Phaser community, with a [documentation website full of Phaser examples](https://rexrainbow.github.io/phaser3-rex-notes/docs/site/) and a bunch of great [Phaser plugins](https://github.com/rexrainbow/phaser4-rex-plugins).\r\n\r\nThe [Rex Await Loader Plugin](https://rexrainbow.github.io/phaser3-rex-notes/docs/site/awaitloader/) can be loaded in the global game context by adding it to the `plugins` attribute in the Phaser config.\r\n\r\n```javascript\r\nimport AwaitLoaderPlugin from 'phaser3-rex-plugins/plugins/awaitloader-plugin.js';\r\n\r\nconst game = new Phaser.Game({\r\n    ...config,\r\n    plugins: {\r\n        global: [\r\n            {\r\n                key: 'rexAwaitLoader',\r\n                plugin: AwaitLoaderPlugin,\r\n                start: true,\r\n            },\r\n        ],\r\n    },\r\n});\r\n```\r\n\r\nThen in the `preload` scene:\r\n\r\n```javascript\r\npreload() {\r\n    this.load.image('image', 'path/to/image.png');\r\n    this.load.rexAwait((successCallback, failureCallback) => {\r\n        fetch('localhost', {\r\n            method: 'GET'\r\n        }).then(() => {\r\n            // do stuff then call the success callback\r\n            successCallback();\r\n        });\r\n    });\r\n    this.load.image('image2', 'path/to/image2.png');\r\n}\r\n```\r\n\r\n## Using the native Phaser Loader\r\nTo avoid loading external plugins, there is also an option to use the native Phaser Loader, as [described by yannick](https://phaser.discourse.group/t/loading-audio/1306/4).\r\n\r\n```javascript\r\npreload() {\r\n    const asyncLoader = (loaderPlugin) => new Promise((resolve, reject) => {\r\n        loaderPlugin.on('filecomplete', resolve).on('loaderror', reject);\r\n        loaderPlugin.start();\r\n    });\r\n\r\n    const doStuff = async () => {\r\n        await asyncLoader(this.load.image('image2', 'path/to/image2.png'));\r\n    };\r\n\r\n    this.load.image('image', 'path/to/image.png');\r\n    doStuff();\r\n    this.load.image('image3', 'path/to/image3.png');\r\n}\r\n```\r\n\r\nI don't know how to conclude this post so there you go, I hope this will be useful for someone out there in the internet. If this helped you in any way, don't forget to leave a comment.\r\n","frontmatter":{"tags":["coding","games","javascript","phaser","phaser 3","asynchronous","rexrainbow","phaser loader"],"categories":["games"],"allowComments":true,"publishOnMedium":false,"cover":null,"date":"2021-11-18T00:00:00.000Z","id":null,"path":"how-to-load-assets-asynchronously-with-phaser-3","show":true,"title":"How to load assets asynchronously with Phaser 3","hideExcerpt":false,"subtitle":""}},"next":{"excerpt":"Quando eu estava trabalhando nos videos dos meus Game…","html":"<p>Quando eu estava trabalhando nos videos dos meus Game Devlogs, eu ficava pensando se seria possível criar automaticamente videos dos meus códigos, que dai ficaria bem mais fácil para criar os meus vídeos, mas como não achei nada relacionado a isso na internet, eu meio que desisti dessa idéia.</p>\n<p>Até que algumas semanas atrás eu estava mexendo com <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\" target=\"_blank\" rel=\"noreferrer\">AST</a> e renderizando componentes em <code class=\"language-text\">React</code> usando <code class=\"language-text\">Node.js</code> e <code class=\"language-text\">Babel</code> e eu percebi que seria possível usar a função <code class=\"language-text\">renderToStaticMarkup</code> para renderizar um HTML com os meus códigos em um headless browser com o Puppeteer e fazer uma gravação dessa página.</p>\n<p>O objetivo é conseguir criar um vídeo como o do GIF abaixo.</p>\n<p><img src=\"/63cbac7ef35f31c0b11e205782860106/code-to-video-v1.gif\" alt=\"\"></p>\n<h2 id=\"partiu-programar\" style=\"position:relative;\"><a href=\"#partiu-programar\" aria-label=\"partiu programar permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Partiu programar</h2>\n<p>Vou começar criando um arquivo <code class=\"language-text\">script.js</code> onde vou executar pela linha de comando.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@babel/register'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> readFileSync <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> puppeteer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'puppeteer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> PuppeteerScreenRecorder <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'puppeteer-screen-recorder'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// Utils</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> generateHtml <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// Constants</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token constant\">SCALE</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateVideo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">filePath</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// TODO</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// get node script param</span>\r\n<span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span>\r\n    process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">'./examples/Test.jsx'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token function\">generateVideo</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esse código vai usar <code class=\"language-text\">ES Modules</code>, então eu preciso instalar o pacote <a href=\"https://www.npmjs.com/package/esm\" target=\"_blank\" rel=\"noreferrer\">esm</a> para eu poder rodar o meu script com o comando <code class=\"language-text\">node -r esm src/script.js my_file.js</code>.</p>\n<p>Para a função <code class=\"language-text\">generateVideo</code>, seguirei o <a href=\"https://github.com/puppeteer/puppeteer/blob/v13.0.1/docs/api.md#class-puppeteer\" target=\"_blank\" rel=\"noreferrer\">exemplo de básico do Puppeteer</a> para abrir um headless browser e, em seguida, começar a gravar a sessão com o <a href=\"https://github.com/prasanaworld/puppeteer-screen-recorder#example\" target=\"_blank\" rel=\"noreferrer\">puppeteer-screen-recorder</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateVideo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">filePath</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// load file content</span>\r\n    <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> <span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token literal-property property\">encoding</span><span class=\"token operator\">:</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">const</span> lines <span class=\"token operator\">=</span> code<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// Puppeteer config</span>\r\n    <span class=\"token keyword\">const</span> browser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> puppeteer<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token literal-property property\">headless</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">args</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'--window-size=1920,1080'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">defaultViewport</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">1920</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">1080</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// open a new empty page</span>\r\n    <span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">newPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token literal-property property\">followNewTab</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">fps</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">ffmpeg_Path</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">videoFrame</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">1920</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">1080</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">aspectRatio</span><span class=\"token operator\">:</span> <span class=\"token string\">'16:9'</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">const</span> recorder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PuppeteerScreenRecorder</span><span class=\"token punctuation\">(</span>\r\n        page<span class=\"token punctuation\">,</span>\r\n        config\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// start recording</span>\r\n    <span class=\"token keyword\">await</span> recorder<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./output.mp4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;p>Hello World&lt;/p>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">waitForTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">await</span> recorder<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esse código vai abrir uma aba no headless browser, definir o HTML da página para <code class=\"language-text\">&lt;p>Hello World&lt;/p></code> e gravar um vídeo de um segundo. Não é bem isso que eu quero, mas estou chegando lá.</p>\n<h2 id=\"renderizando-um-componente-em-react\" style=\"position:relative;\"><a href=\"#renderizando-um-componente-em-react\" aria-label=\"renderizando um componente em react permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Renderizando um componente em React</h2>\n<p>Agora eu vou criar uma função para renderizar o meu componente em <code class=\"language-text\">React</code>. Essa função vai receber como parâmetro o meu código e retornar um HTML com a sintaxe do código toda colorida pelo <a href=\"https://prismjs.com/\" target=\"_blank\" rel=\"noreferrer\">Prism.js</a>.</p>\n<p>Com a função <code class=\"language-text\">Prism.highlight</code> eu pego o HTML com a sintaxe do código colorida e passo para o meu componente em <code class=\"language-text\">React</code>, que então vai adicionar outras tags de HTML e o CSS. Para renderizar esse componente em <code class=\"language-text\">React</code>, vou usar a função <code class=\"language-text\">renderToStaticMarkup</code>, que vai transformar o componente em uma string de HTML. Na real eu nem precisava usar o <code class=\"language-text\">React</code> para esse projeto, mas como tudo começou com eu mexendo com <code class=\"language-text\">React</code> e <code class=\"language-text\">Babel</code>, eu deixei como está.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> renderToStaticMarkup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/server'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">JSDOM</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'jsdom'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> readFileSync <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fs'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// Prism.js</span>\r\n<span class=\"token keyword\">import</span> Prism <span class=\"token keyword\">from</span> <span class=\"token string\">'prismjs'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> loadLanguages <span class=\"token keyword\">from</span> <span class=\"token string\">'prismjs/components/'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// My custom React component</span>\r\n<span class=\"token keyword\">import</span> CodeHighlighter <span class=\"token keyword\">from</span> <span class=\"token string\">'./CodeHighlighter.jsx'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> styling <span class=\"token operator\">=</span> <span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>\r\n    <span class=\"token string\">'./node_modules/prism-themes/themes/prism-material-dark.css'</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">encoding</span><span class=\"token operator\">:</span> <span class=\"token string\">'utf8'</span> <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateHtml</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token parameter\">code<span class=\"token punctuation\">,</span>\r\n    currentLine<span class=\"token punctuation\">,</span>\r\n    totalLines<span class=\"token punctuation\">,</span>\r\n    language</span>\r\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">loadLanguages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>language<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">const</span> codeHtml <span class=\"token operator\">=</span> Prism<span class=\"token punctuation\">.</span><span class=\"token function\">highlight</span><span class=\"token punctuation\">(</span>\r\n        code<span class=\"token punctuation\">,</span>\r\n        Prism<span class=\"token punctuation\">.</span>languages<span class=\"token punctuation\">[</span>language<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n        language\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// get HTML string</span>\r\n    <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token function\">renderToStaticMarkup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>\r\n        <span class=\"token operator\">&lt;</span>CodeHighlighter\r\n            codeHtml<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>codeHtml<span class=\"token punctuation\">}</span>\r\n            totalLines<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>totalLines<span class=\"token punctuation\">}</span>\r\n            currentLine<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>currentLine<span class=\"token punctuation\">}</span>\r\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> window <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSDOM</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> document <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> window<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// Add Prism.js styling to the HTML document</span>\r\n    <span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    style<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> styling<span class=\"token punctuation\">;</span>\r\n    document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>outerHTML<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Além da variável <code class=\"language-text\">code</code>, a função <code class=\"language-text\">generateHtml</code> também recebe <code class=\"language-text\">currentLine</code> e <code class=\"language-text\">totalLines</code> como parâmetros. A variável <code class=\"language-text\">currentLine</code> será usada para destacar a linha de código atual, e <code class=\"language-text\">totalLines</code> para mostrar os números das linhas à esquerda.</p>\n<h2 id=\"o-componente-em-react\" style=\"position:relative;\"><a href=\"#o-componente-em-react\" aria-label=\"o componente em react permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>O componente em React</h2>\n<p>A implementação básica do <code class=\"language-text\">CodeHighlighter</code> eu simplesmente retornarei uma tag <code class=\"language-text\">code</code> com o atributo <code class=\"language-text\">dangerouslySetInnerHTML</code> definido para o HTML do Prism.js.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token constant\">SCALE</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">CodeHighlighter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\r\n    codeHtml<span class=\"token punctuation\">,</span>\r\n    totalLines<span class=\"token punctuation\">,</span>\r\n    currentLine<span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n        <span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span>\r\n            <span class=\"token operator\">&lt;</span>body\r\n                style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\r\n                    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">1920</span> <span class=\"token operator\">/</span> <span class=\"token constant\">SCALE</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\r\n                    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">1080</span> <span class=\"token operator\">/</span> <span class=\"token constant\">SCALE</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\r\n                    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">'#272822'</span><span class=\"token punctuation\">,</span>\r\n                    <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">scale(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">SCALE</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\r\n                    <span class=\"token literal-property property\">transformOrigin</span><span class=\"token operator\">:</span> <span class=\"token string\">'0% 0% 0px'</span><span class=\"token punctuation\">,</span>\r\n                    <span class=\"token literal-property property\">margin</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\r\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            <span class=\"token operator\">></span>\r\n                <span class=\"token operator\">&lt;</span>div\r\n                    style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\r\n                        <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span>\r\n                        <span class=\"token literal-property property\">margin</span><span class=\"token operator\">:</span> <span class=\"token string\">'20px 0 0 2px'</span><span class=\"token punctuation\">,</span>\r\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n                <span class=\"token operator\">></span>\r\n                    <span class=\"token operator\">&lt;</span>pre\r\n                        style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\r\n                            <span class=\"token literal-property property\">margin</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\r\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n                    <span class=\"token operator\">></span>\r\n                        <span class=\"token operator\">&lt;</span>code\r\n                            style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\r\n                                <span class=\"token literal-property property\">fontFamily</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Consolas,Monaco,'Andale Mono','Ubuntu Mono',monospace\"</span><span class=\"token punctuation\">,</span>\r\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n                            dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\r\n                                <span class=\"token literal-property property\">__html</span><span class=\"token operator\">:</span> codeHtml<span class=\"token punctuation\">,</span>\r\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n                        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n                    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pre<span class=\"token operator\">></span>\r\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> CodeHighlighter<span class=\"token punctuation\">;</span></code></pre></div>\n<p>O código acima ainda está faltando o destaque da linha de código atual e os números das linhas, para isso usarei a variável <code class=\"language-text\">totalLines</code> para criar os números da linhas, e <code class=\"language-text\">currentLine</code> para criar uma <code class=\"language-text\">div</code> com largura total da página e movê-la para cima ou para baixo com a propriedade <code class=\"language-text\">margem-top</code> do CSS. Verifique o código completo para este componente <a href=\"https://github.com/blopa/code-video-creator/blob/fc6836c497d5dd0a13a00f1f779fd2d482ebc611/src/CodeHighlighter.jsx\" target=\"_blank\" rel=\"noreferrer\">no GitHub</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token constant\">SCALE</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">CodeHighlighter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\r\n    codeHtml<span class=\"token punctuation\">,</span>\r\n    totalLines<span class=\"token punctuation\">,</span>\r\n    currentLine<span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// add the line numbers</span>\r\n    <span class=\"token keyword\">const</span> lines <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>totalLines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>\r\n        <span class=\"token operator\">&lt;</span>span\r\n            key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span>\r\n            style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\r\n                <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'16px'</span><span class=\"token punctuation\">,</span>\r\n                <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>totalLines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n        <span class=\"token operator\">></span>\r\n            <span class=\"token punctuation\">{</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\r\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n        <span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span>\r\n            <span class=\"token operator\">&lt;</span>style\r\n                dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\r\n                    <span class=\"token literal-property property\">__html</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\r\n                    body { color: white; }\r\n                </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\r\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n            <span class=\"token operator\">&lt;</span>body\r\n                style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\r\n                    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">1920</span> <span class=\"token operator\">/</span> <span class=\"token constant\">SCALE</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\r\n                    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">1080</span> <span class=\"token operator\">/</span> <span class=\"token constant\">SCALE</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\r\n                    <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">'#272822'</span><span class=\"token punctuation\">,</span>\r\n                    <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">scale(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">SCALE</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\r\n                    <span class=\"token literal-property property\">transformOrigin</span><span class=\"token operator\">:</span> <span class=\"token string\">'0% 0% 0px'</span><span class=\"token punctuation\">,</span>\r\n                    <span class=\"token literal-property property\">margin</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\r\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n            <span class=\"token operator\">></span>\r\n                <span class=\"token operator\">&lt;</span>div\r\n                    style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\r\n                        <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span>\r\n                        <span class=\"token literal-property property\">margin</span><span class=\"token operator\">:</span> <span class=\"token string\">'20px 0 0 2px'</span><span class=\"token punctuation\">,</span>\r\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n                <span class=\"token operator\">></span>\r\n                    <span class=\"token operator\">&lt;</span>div\r\n                        style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\r\n                            <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token string\">'100%'</span><span class=\"token punctuation\">,</span>\r\n                            <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> <span class=\"token string\">'absolute'</span><span class=\"token punctuation\">,</span>\r\n                            <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token constant\">SCALE</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\r\n                            <span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> <span class=\"token string\">'#44463a'</span><span class=\"token punctuation\">,</span>\r\n                            <span class=\"token literal-property property\">zIndex</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\r\n                            <span class=\"token literal-property property\">marginTop</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token number\">16</span> <span class=\"token operator\">*</span> currentLine<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\r\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n                    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n                    <span class=\"token operator\">&lt;</span>div\r\n                        style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\r\n                            <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> <span class=\"token string\">'grid'</span><span class=\"token punctuation\">,</span>\r\n                            <span class=\"token literal-property property\">margin</span><span class=\"token operator\">:</span> <span class=\"token string\">'0 5px 0 2px'</span><span class=\"token punctuation\">,</span>\r\n                            <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'#DD6'</span><span class=\"token punctuation\">,</span>\r\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n                    <span class=\"token operator\">></span>\r\n                        <span class=\"token punctuation\">{</span>lines<span class=\"token punctuation\">}</span>\r\n                    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n                    <span class=\"token operator\">&lt;</span>pre\r\n                        style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\r\n                            <span class=\"token literal-property property\">margin</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\r\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n                    <span class=\"token operator\">></span>\r\n                        <span class=\"token operator\">&lt;</span>code\r\n                            style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\r\n                                <span class=\"token literal-property property\">fontFamily</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Consolas,Monaco,'Andale Mono','Ubuntu Mono',monospace\"</span><span class=\"token punctuation\">,</span>\r\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n                            dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\r\n                                <span class=\"token literal-property property\">__html</span><span class=\"token operator\">:</span> codeHtml<span class=\"token punctuation\">,</span>\r\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n                        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n                    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>pre<span class=\"token operator\">></span>\r\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> CodeHighlighter<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora eu posso pegar a string desse HTML, com toda a sintaxe de código colorida e números de linhas, e colocar como o HTML do headless browser pelo Puppeteer.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">newPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token function\">generateHtml</span><span class=\"token punctuation\">(</span>\r\n    code<span class=\"token punctuation\">,</span>\r\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\r\n    lines<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\r\n    <span class=\"token string\">'javascript'</span>\r\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"mostrando-o-codigo-linha-por-linha\" style=\"position:relative;\"><a href=\"#mostrando-o-codigo-linha-por-linha\" aria-label=\"mostrando o codigo linha por linha permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mostrando o código linha por linha</h2>\n<p>Por enquanto, estou colocando todo o código no componente <code class=\"language-text\">React</code> de uma vez só, mas idealmente, o código deve ser mostrado linha por linha, e para isso irei percorrer a array de linhas e, em seguida, adicionar linha por linha a uma nova array e passá-la para a função <code class=\"language-text\">generateHtml</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">newPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> codeToParse <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> scrollThreshold <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> line <span class=\"token keyword\">of</span> lines<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    codeToParse<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token function\">generateHtml</span><span class=\"token punctuation\">(</span>\r\n        codeToParse<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n        index<span class=\"token punctuation\">,</span>\r\n        lines<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> scrollThreshold<span class=\"token punctuation\">,</span>\r\n        language\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">waitForTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Isso funciona, mas o problema é que se o código for muito longo, o browser precisa rolar para baixo para seguir as novas linhas, e para isso eu preciso usar a variável <code class=\"language-text\">index</code> do meu loop para acompanhar a linha atual e usar a função <code class=\"language-text\">page.evaluate()</code> do Puppeteer para rolar a página para baixo usando a função <code class=\"language-text\">window.scrollTo()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">newPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> prevPosY <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> basePosY <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> codeToParse <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> scrollThreshold <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> line <span class=\"token keyword\">of</span> lines<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    codeToParse<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// get full page HTML</span>\r\n    <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token function\">generateHtml</span><span class=\"token punctuation\">(</span>\r\n        codeToParse<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n        index<span class=\"token punctuation\">,</span>\r\n        lines<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> scrollThreshold<span class=\"token punctuation\">,</span>\r\n        language\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// set page HTML</span>\r\n    <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">const</span> diff <span class=\"token operator\">=</span> index <span class=\"token operator\">-</span> scrollThreshold<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">const</span> posY <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>\r\n        <span class=\"token punctuation\">(</span>basePosY <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token operator\">*</span> diff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token constant\">SCALE</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token number\">0</span>\r\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// scroll down or up if needed</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevPosY <span class=\"token operator\">!==</span> posY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">posY</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n            window<span class=\"token punctuation\">.</span><span class=\"token function\">scrollTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n                <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> posY<span class=\"token punctuation\">,</span>\r\n                <span class=\"token literal-property property\">behavior</span><span class=\"token operator\">:</span> <span class=\"token string\">'smooth'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> posY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">waitForTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    prevPosY <span class=\"token operator\">=</span> posY<span class=\"token punctuation\">;</span>\r\n    index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"conclusao\" style=\"position:relative;\"><a href=\"#conclusao\" aria-label=\"conclusao permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusão</h2>\n<p>Você pode acessar o código completo desta postagem do blog no meu repositório GitHub na hash <a href=\"https://github.com/blopa/code-video-creator/tree/d595cf30cec13021fb857f9acb83a853e26610d7\" target=\"_blank\" rel=\"noreferrer\">d595cf30cec13021fb857f9acb83a853e26610d7</a> do <code class=\"language-text\">git</code>.</p>\n<p>O projeto começou com o código desse post, mas agora cresceu um pouco mais, e o código atual no branch <code class=\"language-text\">main</code> do repositório tem um efeito de digitação para cada letra, que faz o vídeo ficar bem mais maneiro. Sinta-se à vontade para mergulhar no código fonte na página do projeto <a href=\"https://github.com/blopa/code-video-creator/\" target=\"_blank\" rel=\"noreferrer\">code-video-creator</a>.</p>\n<p><img src=\"/7b9e49e1375d50b5c5e0ca29e78a0a62/code-to-video-v2.gif\" alt=\"\"></p>\n<p>Espero que esse post tenha sido útil para você. Deixe um comentário se tiver alguma dúvida e até a próxima!</p>","fields":{"postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIyLTAxLTA0VDAwOjAwOjAwLjAwMFo=","slug":"/2022/2022-01-04-crie-videos-dos-seus-codigos-de-programacao-com-esse-script-de-nodejs.pt-br/","path":"/blog/coding/crie-videos-dos-seus-codigos-de-programacao-com-esse-script-de-nodejs/","locale":"pt-br"},"rawMarkdownBody":"Quando eu estava trabalhando nos videos dos meus Game Devlogs, eu ficava pensando se seria possível criar automaticamente videos dos meus códigos, que dai ficaria bem mais fácil para criar os meus vídeos, mas como não achei nada relacionado a isso na internet, eu meio que desisti dessa idéia.\r\n\r\nAté que algumas semanas atrás eu estava mexendo com [AST](https://en.wikipedia.org/wiki/Abstract_syntax_tree) e renderizando componentes em `React` usando `Node.js` e `Babel` e eu percebi que seria possível usar a função `renderToStaticMarkup` para renderizar um HTML com os meus códigos em um headless browser com o Puppeteer e fazer uma gravação dessa página.\r\n\r\nO objetivo é conseguir criar um vídeo como o do GIF abaixo.\r\n\r\n![](../../uploads/blog/2022/01/code-to-video-v1.gif)\r\n\r\n## Partiu programar\r\nVou começar criando um arquivo `script.js` onde vou executar pela linha de comando.\r\n\r\n```javascript\r\nrequire('@babel/register');\r\n\r\nconst { readFileSync } = require('fs');\r\nconst puppeteer = require('puppeteer');\r\nconst { PuppeteerScreenRecorder } = require('puppeteer-screen-recorder');\r\n\r\n// Utils\r\nconst { generateHtml } = require('./utils');\r\n\r\n// Constants\r\nconst SCALE = 4;\r\n\r\nconst generateVideo = async (filePath) => {\r\n    // TODO\r\n};\r\n\r\n// get node script param\r\nconst filePath =\r\n    process.argv[2] || './examples/Test.jsx';\r\n\r\ngenerateVideo(filePath);\r\n```\r\n\r\nEsse código vai usar `ES Modules`, então eu preciso instalar o pacote [esm](https://www.npmjs.com/package/esm) para eu poder rodar o meu script com o comando `node -r esm src/script.js my_file.js`.\r\n\r\nPara a função `generateVideo`, seguirei o [exemplo de básico do Puppeteer](https://github.com/puppeteer/puppeteer/blob/v13.0.1/docs/api.md#class-puppeteer) para abrir um headless browser e, em seguida, começar a gravar a sessão com o [puppeteer-screen-recorder](https://github.com/prasanaworld/puppeteer-screen-recorder#example).\r\n\r\n```javascript\r\nconst generateVideo = async (filePath) => {\r\n    // load file content\r\n    const code = readFileSync(filePath, {\r\n        encoding: 'utf8',\r\n    });\r\n    const lines = code.split('\\n');\r\n\r\n    // Puppeteer config\r\n    const browser = await puppeteer.launch({\r\n        headless: true,\r\n        args: ['--window-size=1920,1080'],\r\n        defaultViewport: {\r\n            width: 1920,\r\n            height: 1080,\r\n        },\r\n    });\r\n\r\n    // open a new empty page\r\n    const page = await browser.newPage();\r\n    const config = {\r\n        followNewTab: false,\r\n        fps: 25,\r\n        ffmpeg_Path: null,\r\n        videoFrame: {\r\n            width: 1920,\r\n            height: 1080,\r\n        },\r\n        aspectRatio: '16:9',\r\n    };\r\n\r\n    const recorder = new PuppeteerScreenRecorder(\r\n        page,\r\n        config\r\n    );\r\n\r\n    // start recording\r\n    await recorder.start('./output.mp4');\r\n    await page.setContent('<p>Hello World</p>');\r\n\r\n    await page.waitForTimeout(1000);\r\n\r\n    await recorder.stop();\r\n    await browser.close();\r\n};\r\n```\r\n\r\nEsse código vai abrir uma aba no headless browser, definir o HTML da página para `<p>Hello World</p>` e gravar um vídeo de um segundo. Não é bem isso que eu quero, mas estou chegando lá.\r\n\r\n## Renderizando um componente em React\r\nAgora eu vou criar uma função para renderizar o meu componente em `React`. Essa função vai receber como parâmetro o meu código e retornar um HTML com a sintaxe do código toda colorida pelo [Prism.js](https://prismjs.com/).\r\n\r\nCom a função `Prism.highlight` eu pego o HTML com a sintaxe do código colorida e passo para o meu componente em `React`, que então vai adicionar outras tags de HTML e o CSS. Para renderizar esse componente em `React`, vou usar a função `renderToStaticMarkup`, que vai transformar o componente em uma string de HTML. Na real eu nem precisava usar o `React` para esse projeto, mas como tudo começou com eu mexendo com `React` e `Babel`, eu deixei como está.\r\n\r\n```javascript\r\nimport React from 'react';\r\nimport { renderToStaticMarkup } from 'react-dom/server';\r\nimport { JSDOM } from 'jsdom';\r\nimport { readFileSync } from 'fs';\r\n\r\n// Prism.js\r\nimport Prism from 'prismjs';\r\nimport loadLanguages from 'prismjs/components/';\r\n\r\n// My custom React component\r\nimport CodeHighlighter from './CodeHighlighter.jsx';\r\n\r\nconst styling = readFileSync(\r\n    './node_modules/prism-themes/themes/prism-material-dark.css',\r\n    { encoding: 'utf8' }\r\n);\r\n\r\nexport const generateHtml = (\r\n    code,\r\n    currentLine,\r\n    totalLines,\r\n    language\r\n) => {\r\n    loadLanguages([language]);\r\n    const codeHtml = Prism.highlight(\r\n        code,\r\n        Prism.languages[language],\r\n        language\r\n    );\r\n\r\n    // get HTML string\r\n    const html = renderToStaticMarkup((\r\n        <CodeHighlighter\r\n            codeHtml={codeHtml}\r\n            totalLines={totalLines}\r\n            currentLine={currentLine}\r\n        />\r\n    ));\r\n\r\n    const { window } = new JSDOM(html);\r\n    const { document } = window;\r\n\r\n    // Add Prism.js styling to the HTML document\r\n    const style = document.createElement('style');\r\n    style.textContent = styling;\r\n    document.head.appendChild(style);\r\n\r\n    return document.getElementsByTagName('html')[0].outerHTML;\r\n};\r\n```\r\n\r\nAlém da variável `code`, a função `generateHtml` também recebe `currentLine` e `totalLines` como parâmetros. A variável `currentLine` será usada para destacar a linha de código atual, e `totalLines` para mostrar os números das linhas à esquerda.\r\n\r\n## O componente em React\r\nA implementação básica do `CodeHighlighter` eu simplesmente retornarei uma tag `code` com o atributo `dangerouslySetInnerHTML` definido para o HTML do Prism.js.\r\n\r\n```javascript\r\nimport React from 'react';\r\n\r\nconst SCALE = 4;\r\n\r\nfunction CodeHighlighter({\r\n    codeHtml,\r\n    totalLines,\r\n    currentLine,\r\n}) {\r\n    return (\r\n        <html lang=\"en\">\r\n            <body\r\n                style={{\r\n                    width: `${1920 / SCALE}px`,\r\n                    height: `${1080 / SCALE}px`,\r\n                    background: '#272822',\r\n                    transform: `scale(${SCALE})`,\r\n                    transformOrigin: '0% 0% 0px',\r\n                    margin: 0,\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        margin: '20px 0 0 2px',\r\n                    }}\r\n                >\r\n                    <pre\r\n                        style={{\r\n                            margin: 0,\r\n                        }}\r\n                    >\r\n                        <code\r\n                            style={{\r\n                                fontFamily: \"Consolas,Monaco,'Andale Mono','Ubuntu Mono',monospace\",\r\n                            }}\r\n                            dangerouslySetInnerHTML={{\r\n                                __html: codeHtml,\r\n                            }}\r\n                        />\r\n                    </pre>\r\n                </div>\r\n            </body>\r\n        </html>\r\n    );\r\n}\r\n\r\nexport default CodeHighlighter;\r\n```\r\n\r\nO código acima ainda está faltando o destaque da linha de código atual e os números das linhas, para isso usarei a variável `totalLines` para criar os números da linhas, e `currentLine` para criar uma `div` com largura total da página e movê-la para cima ou para baixo com a propriedade `margem-top` do CSS. Verifique o código completo para este componente [no GitHub](https://github.com/blopa/code-video-creator/blob/fc6836c497d5dd0a13a00f1f779fd2d482ebc611/src/CodeHighlighter.jsx).\r\n\r\n```javascript\r\nimport React from 'react';\r\n\r\nconst SCALE = 4;\r\n\r\nfunction CodeHighlighter({\r\n    codeHtml,\r\n    totalLines,\r\n    currentLine,\r\n}) {\r\n    // add the line numbers\r\n    const lines = new Array(totalLines).fill(null).map((v, index) => ((\r\n        <span\r\n            key={index}\r\n            style={{\r\n                height: '16px',\r\n                width: `${8 * (totalLines).toString().length}px`,\r\n            }}\r\n        >\r\n            {index + 1}\r\n        </span>\r\n    )));\r\n\r\n    return (\r\n        <html lang=\"en\">\r\n            <style\r\n                dangerouslySetInnerHTML={{\r\n                    __html: `\r\n                    body { color: white; }\r\n                `,\r\n                }}\r\n            />\r\n            <body\r\n                style={{\r\n                    width: `${1920 / SCALE}px`,\r\n                    height: `${1080 / SCALE}px`,\r\n                    background: '#272822',\r\n                    transform: `scale(${SCALE})`,\r\n                    transformOrigin: '0% 0% 0px',\r\n                    margin: 0,\r\n                }}\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        margin: '20px 0 0 2px',\r\n                    }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            width: '100%',\r\n                            position: 'absolute',\r\n                            height: `${4 * SCALE}px`,\r\n                            backgroundColor: '#44463a',\r\n                            zIndex: -1,\r\n                            marginTop: `${16 * currentLine}px`,\r\n                        }}\r\n                    />\r\n                    <div\r\n                        style={{\r\n                            display: 'grid',\r\n                            margin: '0 5px 0 2px',\r\n                            color: '#DD6',\r\n                        }}\r\n                    >\r\n                        {lines}\r\n                    </div>\r\n                    <pre\r\n                        style={{\r\n                            margin: 0,\r\n                        }}\r\n                    >\r\n                        <code\r\n                            style={{\r\n                                fontFamily: \"Consolas,Monaco,'Andale Mono','Ubuntu Mono',monospace\",\r\n                            }}\r\n                            dangerouslySetInnerHTML={{\r\n                                __html: codeHtml,\r\n                            }}\r\n                        />\r\n                    </pre>\r\n                </div>\r\n            </body>\r\n        </html>\r\n    );\r\n}\r\n\r\nexport default CodeHighlighter;\r\n```\r\n\r\nAgora eu posso pegar a string desse HTML, com toda a sintaxe de código colorida e números de linhas, e colocar como o HTML do headless browser pelo Puppeteer.\r\n\r\n```javascript\r\nconst page = await browser.newPage();\r\n\r\nconst html = generateHtml(\r\n    code,\r\n    0,\r\n    lines.length,\r\n    'javascript'\r\n);\r\n\r\nawait page.setContent(html);\r\n```\r\n\r\n## Mostrando o código linha por linha\r\nPor enquanto, estou colocando todo o código no componente `React` de uma vez só, mas idealmente, o código deve ser mostrado linha por linha, e para isso irei percorrer a array de linhas e, em seguida, adicionar linha por linha a uma nova array e passá-la para a função `generateHtml`.\r\n\r\n```javascript\r\nconst page = await browser.newPage();\r\n\r\nlet index = 0;\r\nlet codeToParse = [];\r\nconst scrollThreshold = 9;\r\n\r\nfor (const line of lines) {\r\n    codeToParse.push(line);\r\n\r\n    const html = generateHtml(\r\n        codeToParse.join('\\n'),\r\n        index,\r\n        lines.length + scrollThreshold,\r\n        language\r\n    );\r\n\r\n    await page.setContent(html);\r\n\r\n    await page.waitForTimeout(1000);\r\n    index += 1;\r\n}\r\n\r\nawait browser.close();\r\n```\r\n\r\nIsso funciona, mas o problema é que se o código for muito longo, o browser precisa rolar para baixo para seguir as novas linhas, e para isso eu preciso usar a variável `index` do meu loop para acompanhar a linha atual e usar a função `page.evaluate()` do Puppeteer para rolar a página para baixo usando a função `window.scrollTo()`.\r\n\r\n```javascript\r\nconst page = await browser.newPage();\r\n\r\nlet index = 0;\r\nlet prevPosY = 0;\r\nconst basePosY = 7;\r\nlet codeToParse = [];\r\nconst scrollThreshold = 8;\r\n\r\nfor (const line of lines) {\r\n    codeToParse.push(line);\r\n\r\n    // get full page HTML\r\n    const html = generateHtml(\r\n        codeToParse.join('\\n'),\r\n        index,\r\n        lines.length + scrollThreshold,\r\n        language\r\n    );\r\n\r\n    // set page HTML\r\n    await page.setContent(html);\r\n\r\n    const diff = index - scrollThreshold;\r\n    const posY = Math.max(\r\n        (basePosY + (16 * diff)) * SCALE,\r\n        0\r\n    );\r\n\r\n    // scroll down or up if needed\r\n    if (prevPosY !== posY) {\r\n        await page.evaluate((posY) => {\r\n            window.scrollTo({\r\n                top: posY,\r\n                behavior: 'smooth',\r\n            });\r\n        }, posY);\r\n    }\r\n\r\n    await page.waitForTimeout(1000);\r\n    prevPosY = posY;\r\n    index += 1;\r\n}\r\n\r\nawait browser.close();\r\n```\r\n\r\n## Conclusão\r\nVocê pode acessar o código completo desta postagem do blog no meu repositório GitHub na hash [d595cf30cec13021fb857f9acb83a853e26610d7](https://github.com/blopa/code-video-creator/tree/d595cf30cec13021fb857f9acb83a853e26610d7) do `git`.\r\n\r\nO projeto começou com o código desse post, mas agora cresceu um pouco mais, e o código atual no branch `main` do repositório tem um efeito de digitação para cada letra, que faz o vídeo ficar bem mais maneiro. Sinta-se à vontade para mergulhar no código fonte na página do projeto [code-video-creator](https://github.com/blopa/code-video-creator/).\r\n\r\n![](../../uploads/blog/2022/01/code-to-video-v2.gif)\r\n\r\nEspero que esse post tenha sido útil para você. Deixe um comentário se tiver alguma dúvida e até a próxima!\r\n","frontmatter":{"tags":["node","nodejs","javascript","código","programação","puppeteer"],"categories":["coding"],"allowComments":true,"publishOnMedium":false,"cover":null,"date":"2022-01-04T00:00:00.000Z","id":null,"path":"crie-videos-dos-seus-codigos-de-programacao-com-esse-script-de-nodejs","show":true,"title":"Crie videos dos seus códigos de programação com esse script de Node.js","hideExcerpt":false,"subtitle":""}},"language":"pt-br","intl":{"language":"pt-br","languages":["en","pt-br"],"messages":{"site_title":"pablo.gg","title":"Título","author":"@thepiratepablo","search_placeholder":"Buscar...","about":"Sobre","photos":"Fotos","archive":"Arquivo","contact":"Contato","close":"Fechar","contact_page":"Página de contato","see_more":"Veja mais posts","built_with":"Feito com ","buy_me_a_soda":"Me pague uma bebida","blog":"Blog","blog_posts":"Posts do blog","go_to_post":"Ir para o post","search":"Busca","loading":"Carregando...","search_results":"Resultados de busca","search_results_for":"{quantity} resultados de busca para: \"{query}\"","search_for_query":"Buscar por \"{query}\"","no_results":"Sem resultados","home":"Home","description":"Apenas mais um blog pessoal","go_back":"Voltar para home","thats_me":"Esse sou eu!","got_it":"Entendi!","check_it_out":"Confira!","we_are":"Faltam","e3":"E3","away_from_next_sgf":"para a Summer Game Fest 2025","away_from_next_gamescom":"para a Gamescom 2024","sgf_countdown":"Contador para Summer Game Fest","gamescom_countdown":"Contador para Gamescom","e3_paragraph_1":"Esta página já contou com uma contagem regressiva para o próximo evento E3, um momento que inúmeros jogadores e profissionais da indústria aguardavam ansiosamente a cada ano. E3 não era apenas um evento; era uma celebração da nossa paixão compartilhada por videogames, um lugar onde sonhos se realizavam e memórias eram feitas.","e3_paragraph_2":"Desde os anúncios eletrizantes até as demos práticas, a E3 era o coração do mundo dos jogos. Ela reunia pessoas de todos os cantos do globo, unidas pelo amor aos jogos. Para muitos, era uma chance de conhecer seus heróis, descobrir novos títulos e experimentar a emoção das últimas inovações em tecnologia de jogos.","e3_paragraph_3":"No entanto, à medida que o cenário dos jogos evoluiu, também evoluiu a maneira como nos conectamos e celebramos nossa paixão. Embora a E3 tenha chegado ao fim, o espírito de excitação e comunidade que ela promoveu continua vivo. Agora esperamos por novas maneiras de nos reunir, compartilhar nosso amor pelos jogos e criar novas memórias.","e3_paragraph_4":"Embora a contagem regressiva tenha acabado, o legado da E3 permanecerá para sempre em nossos corações, nos lembrando das jornadas incríveis que fizemos e dos laços que formamos ao longo do caminho.","sec":"Seg","secs":"Segs","min":"Min","mins":"Mins","hour":"Hora","hours":"Horas","day":"Dia","days":"Dias","month":"Mês","months":"Meses","year":"Ano","years":"Anos","recent_posts":"Posts recentes","email":"E-mail","twitter":"Twitter","name":"Nome","page":"Página","fill_this_want_reply":"Preencha isso se quiser que eu entre em contato com você","sorry_this_post_unavailable_language":"Desculpe, este post não está disponível no idioma que você escolheu","language":"Idioma","comment":"Comentário","comments":"Comentários","no_comments":"Nenhum comentário.","post_comment":"Publicar comentário","send_message":"Enviar mensagem","message":"Mensagem","post_a_comment":"Publicar um comentário","your_comment_submitted":"Seu comentário foi enviado com sucesso.","your_message_submitted":"Sua mensagem foi enviada com sucesso.","on":"em","ok":"Ok","copy":"Copiar","copied":"Copiado","photo_num":"Foto {num}","the_matrix_has_you":"The Matrix has you...","about_paragraph_1":"Entusiasta de tecnologia desde pequeno, sempre me interessei por computadores e videogames.","about_paragraph_2":"Me formei em Tecnologia da Informação na Faculdade Estácio de Sá e sempre procuro me informar sobre novas tecnologias e me envolver em novos projetos de desenvolvimento, alguns deles o código fonte pode ser encontrado no GitHub.","cookie_banner_consent":"Ao usar este site, você concorda com o uso de cookies para oferecer uma melhor experiência.","written_in":"Escrito em ","no_post_this_tag":"Nenhum post em Português contém essa tag.","tags":"Tags","tag_colon":"Tag: ","tags_colon":"Tags: ","posts_tagged":"Posts com a tag ","categories":"Categorias","category":"Categoria","category_colon":"Categoria: ","posts_on_category":"Posts na categoria ","related_posts":"Posts relacionados","read_time":"🕒 {time} min. de leitura","create_post":"Criar Post","show":"Mostrar","date":"Data","download":"Download","add_tag":"Adicionar Tag","hide_excerpt":"Esconder Excerpt","publish_on_medium":"Publicar no Medium","allow_comments":"Permitir Comentários","subtitle":"Subtítulo","you_must_be_truly_desperate":"Você deve estar muito desesperado para me pedir ajuda","game.game_title":"pablo.gg - O Jogo","game.next":"Próxima","game.ok":"Ok","game.loading_asset_colon":"Carregando asset:","game.loading":"Carregando...","game.characters.npc_01":"Frost","game.characters.npc_02":"Gavin","game.characters.npc_03":"Giles","game.characters.npc_04":"Godfrey","game.characters.npc_05":"Hugh","game.characters.npc_06":"Ivar","game.characters.npc_07":"Leopold","game.characters.npc_08":"Lucian","game.characters.npc_09":"Gumercindo","game.characters.npc_10":"Mr. Flower","game.characters.npc_11":"Maxim","game.characters.npc_12":"Milo","game.characters.npc_13":"Otto","game.characters.npc_14":"Palmer","game.characters.npc_15":"Quentin","game.characters.npc_16":"Sebastian","game.characters.npc_17":"Neville","game.characters.npc_18":"Cassian","game.characters.npc_19":"Balthasar","game.characters.sign_01":"Placa","game.characters.book_01":"Livro","game.characters.home_page_city_sign":"Placa","game.characters.coding_category_city_sign_01":"Placa","game.characters.coding_category_city_sign_02":"Placa","game.characters.events_category_city_sign":"Placa","game.characters.funny_category_city_sign":"Placa","game.characters.gadgets_category_city_sign_01":"Placa","game.characters.gadgets_category_city_sign_02":"Placa","game.characters.games_category_city_sign":"Placa","game.characters.general_category_city_sign":"Placa","game.characters.tips_category_city_sign":"Placa","game.characters.toys_category_city_sign":"Placa","game.characters.sword":"Info","game.characters.push":"Info","game.gamepad.a_button":"Botão A","game.gamepad.b_button":"Botão B","game.gamepad.d_pad_left":"D-Pad Esquerda","game.gamepad.d_pad_up":"D-Pad Cima","game.gamepad.d_pad_right":"D-Pad Direita","game.gamepad.d_pad_down":"D-Pad Baixo","game.gamepad.start_button":"Botão Start","game.menu.start":"Começar","game.menu.exit":"Sair","game.menu.settings":"Configurações","game.start_menu.save_game":"Salvar Jogo","game.start_menu.exit":"Sair","game.game_over.game_over":"Game Over","game.game_over.retry":"Tentar Novamente","game.game_over.exit":"Sair","game.browse_posts.choose_a_post":"Escolha um post para ler","game.dialogs.npc_01.01":"Ei, você finalmente acordou!","game.dialogs.npc_01.02":"O quê, você não sabe onde está?","game.dialogs.npc_01.03":"Não seja bobo, você está na Cidade Página Inicial, lembra?","game.dialogs.npc_01.04":"Esta cidade foi fundada por Pablo Montenegro para ser o início de sua jornada","game.dialogs.npc_01.05":"Explore o mundo e encontre outras cidades onde você possa ler o conhecimento acumulado de nossa civilização...","game.dialogs.npc_01.06":"... algumas pessoas chamam de \"Posts do Blog\", não sei por quê...","game.dialogs.npc_02.01":"Tenha cuidado com os Slimes que vivem no mundo aberto.","game.dialogs.npc_02.02":"Pressione ESPAÇO para usar sua espada","game.dialogs.npc_02.03":"O que é ESPAÇO? Eu não faço ideia.","game.dialogs.npc_03.01":"Olá, bem vindo a nossa biblioteca","game.dialogs.npc_03.02":"Temos apenas um livro, que contém todas as publicações da categoria dessa cidade.","game.dialogs.npc_03.03":"Vá dar uma olhada!","game.dialogs.npc_04.01":"Eu gosto de caracóis","game.dialogs.npc_05.01":"Frases incompletas podem causar","game.dialogs.npc_06.01":"O vermelho é mais verde do que o roxo, com certeza.","game.dialogs.npc_07.01":"Ter barba é o novo não ter barba","game.dialogs.npc_08.01":"E aí","game.dialogs.npc_09.01":"\" - Cooper, o que está fazendo?\"\n\" - Atracando.\"","game.dialogs.npc_10.01":"Eu deveria comprar um barco","game.dialogs.npc_11.01":"Conhece a piada do não nem eu? Não? Nem eu!","game.dialogs.npc_12.01":"Eu limpo o banheiro e resgato a princesas, vida boa, certo?","game.dialogs.npc_13.01":"Queremos as ondas de rádio de volta","game.dialogs.npc_14.01":"Salve a líder de torcida, salve o mundo","game.dialogs.npc_15.01":"Olá, como vai?","game.dialogs.npc_15.02":"OK, tchau!","game.dialogs.npc_16.01":"Um canguru é realmente apenas um coelho com esteróides","game.dialogs.npc_17.01":"Pela 216ª vez, ele disse que pararia de beber refrigerante após esta última Coca","game.dialogs.npc_18.01":"Nada e tudo é possímpossivel","game.dialogs.npc_19.01":"Para uma cidade chamada \"Eventos\", não há muito acontecendo...","game.dialogs.sign_01.01":"Parabéns, você pode ler isso!","game.dialogs.book_01.01":"Hey, obrigado por testar esse novo jeito bem esquisito de acessar o meu site","game.dialogs.book_01.02":"Este projeto não seria possível sem o incrível trabalho de muitas pessoas, como:","game.dialogs.book_01.03":"ArMM1998 - Pelos sprites dos personagens e os tilesets","game.dialogs.book_01.04":"PixElthen - Pelos sprites do slime","game.dialogs.book_01.05":"pixelartm - Pelos sprites do chapéu de pirata","game.dialogs.book_01.06":"jkjkke - Pela imagem da tela de Game Over","game.dialogs.book_01.07":"KnoblePersona - Pela imagem da tela do menu inicial","game.dialogs.book_01.08":"Min - Pelo sprite do livro aberto","game.dialogs.book_01.09":"E claro, ao Richard Davey por ter criado o Phaser.io!","game.dialogs.home_page_city_sign":"Cidade Página Inicial","game.dialogs.coding_category_city_sign.01":"Cidade da Categoria Programação","game.dialogs.coding_category_city_sign.02":"Cidade da Categoria Programação","game.dialogs.events_category_city_sign":"Cidade da Categoria Eventos","game.dialogs.funny_category_city_sign":"Cidade da Categoria Engraçado","game.dialogs.gadgets_category_city_sign.01":"Cidade da Categoria Eletrónicos","game.dialogs.gadgets_category_city_sign.02":"Cidade da Categoria Eletrónicos","game.dialogs.games_category_city_sign":"Cidade da Categoria Jogos","game.dialogs.general_category_city_sign":"Cidade da Categoria Geral","game.dialogs.tips_category_city_sign":"Cidade da Categoria Dicas","game.dialogs.toys_category_city_sign":"Cidade da Categoria Brinquedos","game.dialogs.sword_item_description":"Agora você pode atacar, pressione ESPAÇO para usar sua espada.","game.dialogs.push_item_description":"Agora você pode empurrar alguns objetos, pressione ESPAÇO na frente de um objeto para empurrá-lo.","zelda_timeline.title":"Timeline de Zelda","zelda_timeline.timeline_split":"Divisão da Timeline","zelda_timeline.timeline_unification":"Timeline Unificada","zelda_timeline.icons_from":"Os ícones usados nesta página são do zeldauniverse.net e game-icons.net","zelda_timeline.creation":"Criação","zelda_timeline.creation_of_land_sky":"A Criação da Terra e do Céu","zelda_timeline.goddess_hylia_and_sky_era":"Deusa Hylia e a Era do Céu","zelda_timeline.skyward_sword":"Skyward Sword","zelda_timeline.the_ancient_battle":"A Antiga Batalha e a reencarnação da Deusa Hylia","zelda_timeline.return_to_surface":"O retorno à superfície","zelda_timeline.era_of_chaos":"Era do caos","zelda_timeline.sacred_realm_sealed":"O Sacred Realm é selado","zelda_timeline.era_of_prosperity":"Era da Prosperidade","zelda_timeline.establishment_of_hyrule":"O Reino de Hyrule é estabelecido","zelda_timeline.force_era":"Era da Força","zelda_timeline.the_minish_cap":"The Minish Cap","zelda_timeline.rise_of_evil_vaati":"A Ascensão do Maligno Vaati","zelda_timeline.four_swords":"Four Swords","zelda_timeline.resurrection_of_vaati":"A Ressurreição de Vaati","zelda_timeline.era_of_the_hero_of_time":"Era do Herói do Tempo","zelda_timeline.hyrulean_civil_war":"Guerra Civil Hyruleana","zelda_timeline.ocarina_of_time":"Ocarina of Time","zelda_timeline.sacred_realm_becomes_dark_world":"O Sacred Realm se torna o Dark World","zelda_timeline.ganondorf_becomes_ganon":"Ganondorf se torna Ganon","zelda_timeline.hero_is_defeated":"O herói é derrotado","zelda_timeline.decline_of_last_hero":"O declínio de Hyrule e o último herói","zelda_timeline.the_imprisoning_war":"A Guerra do Aprisionamento","zelda_timeline.era_of_dark_and_light":"Era de Luz e Escuridão","zelda_timeline.a_link_to_the_past":"A Link to the Past","zelda_timeline.resurrection_of_ganon":"A Ressurreição de Ganon","zelda_timeline.resurrection_of_ganon_is_prevented":"A ressurreição de Ganon é evitada","zelda_timeline.links_awakening":"Link's Awakening","zelda_timeline.oracle_of_ages_and_seasons":"Oracle of Ages e Oracle of Seasons","zelda_timeline.a_link_between_worlds":"A Link Between Worlds","zelda_timeline.tri_force_heroes":"Tri Force Heroes","zelda_timeline.the_gold_era":"The Gold Era","zelda_timeline.monarchs_of_hyrule_use_triforce":"Os Monarcas de Hyrule usam a Triforce","zelda_timeline.era_of_decline":"A Era do Declínio","zelda_timeline.tragedy_of_princess_zelda_1":"A Tragédia da Princesa Zelda I","zelda_timeline.the_legend_of_zelda":"The Legend of Zelda","zelda_timeline.adventure_of_link":"Adventure of Link","zelda_timeline.hero_defeated":"Hero Derrotado","zelda_timeline.child_era":"Era Infantil","zelda_timeline.adult_era":"Era Adulta","zelda_timeline.sacred_realm_protected":"Sacred Realm está protegido","zelda_timeline.twilight_realm_and_legacy_of_hero":"O Twilight Realm e o legado do Herói","zelda_timeline.majoras_mask":"Majora's Mask","zelda_timeline.prince_of_thieves_is_executed":"O Príncipe dos Ladrões Ganondorf é executado","zelda_timeline.twilight_era":"A Era do Twilight","zelda_timeline.twilight_princess":"Twilight Princess","zelda_timeline.shadow_invasion":"A invasão das sombras","zelda_timeline.shadow_era":"A Era das Sombras","zelda_timeline.four_swords_adventures":"Four Swords Adventures","zelda_timeline.reincarnation_of_ganondorf":"A Reencarnação de Ganondorf","zelda_timeline.ganondorf_is_sealed":"Ganondorf é selado","zelda_timeline.hero_of_wind_and_new_world":"O Herói do Vento e um Novo Mundo","zelda_timeline.era_without_a_hero":"A era sem um herói","zelda_timeline.ganondorf_is_resurrected":"Ganondorf é ressuscitado","zelda_timeline.hyrule_is_sealed_and_flooded":"Hyrule é selado e então inundado","zelda_timeline.era_of_the_great_sea":"A Era do Great Sea","zelda_timeline.the_wind_waker":"The Wind Waker","zelda_timeline.era_of_the_great_voyage":"A Era da Grande Viagem","zelda_timeline.phantom_hourglass":"Phantom Hourglass","zelda_timeline.era_of_hyrule_rebirth":"A Era do Renascimento de Hyrule","zelda_timeline.new_continent_discovered":"Novo continente descoberto","zelda_timeline.new_hyrule_is_founded":"Um novo reino de Hyrule é fundado","zelda_timeline.spirit_tracks":"Spirit Tracks","zelda_timeline.evil_king_malladus_is_resurrected":"O Rei Maligno Malladus é ressuscitado","zelda_timeline.age_of_calamity":"Age of Calamity","zelda_timeline.breath_of_the_wild":"Breath of the Wild","zelda_timeline.era_of_the_wilds":"A Era dos Selvagens","zelda_timeline.calamity_ganon_is_sealed":"Calamity Ganon é Selado. A tecnologia é proibida, levando alguns Sheikah a formar o Yiga Clan","zelda_timeline.divine_beasts_are_cleansed":"As Bestas Divinas são purificadas e Calamity Ganon é Selado","zelda_timeline.tears_of_the_kingdom":"Tears of the Kingdom","zelda_timeline.hyrule_kingdom_is_teared_apart":"Ganondorf é ressuscitado (Será?)","blog_categories.games":"Jogos","blog_categories.general":"Geral","blog_categories.tips":"Dicas","blog_categories.events":"Eventos","blog_categories.coding":"Programação","blog_categories.funny":"Engraçado","blog_categories.toys":"Brinquedos","blog_categories.gadgets":"Eletrónicos","e3_2012_photos.title":"E3 2012","e3_2012_photos.description":"Em junho de 2012 participei da E3 como imprensa para uma cobertura completa para o Nintendo Blast.","e3_2013_photos.title":"E3 2013","e3_2013_photos.description":"Em junho de 2013 participei da E3 como imprensa para uma cobertura completa para o Game Blast.","e3_2014_photos.title":"E3 2014","e3_2014_photos.description":"Em junho de 2014 participei da E3 como imprensa para uma cobertura completa para o Game Blast.","e3_2015_photos.title":"E3 2015","e3_2015_photos.description":"Em junho de 2015 participei da E3 como imprensa para uma cobertura completa para o Game Blast e Game Over TV.","e3_2017_photos.title":"E3 2017","e3_2017_photos.description":"Em junho de 2017 participei da E3 como imprensa para uma cobertura completa para o PlayReplay e Game Over TV.","e3_2019_photos.title":"E3 2019","e3_2019_photos.description":"Em junho de 2019 participei da E3 como imprensa para uma cobertura completa para o PlayReplay.","gamescom_2019_photos.title":"Gamescom 2019","gamescom_2019_photos.description":"Em agosto de 2019 participei da Gamescom como imprensa para uma cobertura completa para o PlayReplay.","san_francisco_2019_photos.title":"San Francisco 2019","san_francisco_2019_photos.description":"Em setembro de 2019, viajei para San Francisco para o show do Metallica S&M2.","forty_two_page.title":"Quarenta e Dois","forty_two_page.description":"Até mais, e obrigado pelos peixes!","projects_page.title":"Projetos","projects_page.description":"Aqui está uma lista de alguns dos meus projetos pessoais favoritos.","projects_page.gatsbyMaterialUiBlogDescription":"Um simples Gatsby Blog Starter com Material UI.","projects_page.contractBuilderDescription":"O Contract Builder é um projeto de código aberto gratuito que permite a qualquer pessoa manter e construir facilmente qualquer tipo de contrato (documentos legais, processos judiciais, aluguel, acordos, construção e assim por diante) usando o Google Spreadsheets. Este foi desenvolvido como um projeto pessoal para ajudar uma amiga que estava com dificuldades de gastar até uma hora para fazer um contrato personalizado, agora ela consegue fazer em menos de 5 minutos. Hooray!","projects_page.resumeBuilderDescription":"Resume Builder é um projeto de código aberto gratuito que permite a qualquer pessoa manter e construir facilmente qualquer tipo de currículo usando o Google Spreadsheets. Este foi desenvolvido como um projeto pessoal para ajudar um amigo que estava com dificuldades de gastar até uma hora para fazer um currículo personalizado.","projects_page.magentoChatbotDescription":"Com este módulo, você pode integrar totalmente a sua loja Magento com os aplicativos de chat mais populares do mercado. Isso significa que simplesmente instalando este módulo e alguns cliques você pode ter uma nova forma de mostrar e vender seus produtos aos seus clientes. Muito fácil de usar! Experimente agora, é GRÁTIS.","projects_page.jamStackSortenerDescription":"Este é um POC de um encurtador de URL básico desenvolvido com Gatsby.","projects_page.gotinhaDescription":"Sempre foi meu sonho fazer meu próprio jogo, e depois de experimentar o Unity alguns anos atrás, decidi tentar novamente com algo com o qual estou mais familiarizado: Javascript. Como desenvolvedor front-end, Javascript já é a linguagem com a qual escrevo a maior parte do meu código no trabalho e também em meus projetos pessoais, e após uma rápida pesquisa consegui encontrar o incrível PhaserJS Framework para construção de jogos web 2D.","notfound.title":"404: Não encontrado","notfound.header":"404 NÃO ENCONTRADO","notfound.description":"Desculpe, esta página parece não existir. Talvez os arquivos estejam incompletos?","seo_keywords.developer":"desenvolvedor","seo_keywords.development":"desenvolvimento","seo_keywords.javascript":"javascript","seo_keywords.es6":"es6","seo_keywords.e3":"e3","seo_keywords.sgf":"sgf","seo_keywords.gamescom":"gamescom","seo_keywords.countdown":"contador","seo_keywords.archive":"arquivo","seo_keywords.about_me":"sobre mim","seo_keywords.personal_blog":"blog pessoal","seo_keywords.personal_projects":"projetos pessoais","seo_keywords.travels":"viagens","seo_keywords.tips":"dicas","seo_keywords.lifehacks":"truques de produtividade","seo_keywords.reviews":"analises","seo_keywords.games":"games","seo_keywords.timeline":"linha do tempo","seo_keywords.photos":"fotos","cookie_law.we_use_cookies":"Usamos cookies para garantir que você obtenha a melhor experiência em nosso site. Ao usar nosso site, você concorda com nossa ","cookie_law.title":"Política de cookies","cookie_law.what_are_cookies":"O que são cookies?","cookie_law.what_are_cookies_text":"Como é prática comum em quase todos os sites profissionais, este site usa cookies, que são pequenos arquivos baixados para o seu computador, para melhorar a sua experiência. Esta página descreve quais informações eles coletam, como as usamos e por que às vezes precisamos armazenar esses cookies. Também compartilharemos como você pode evitar que esses cookies sejam armazenados, no entanto, isso pode diminuir ou 'quebrar' certos elementos da funcionalidade do site. Para obter mais informações gerais sobre cookies, leia ","cookie_law.what_are_cookies_more_info_url":"https://pt.wikipedia.org/wiki/Cookie_(informática)","cookie_law.how_we_use_cookies":"Como usamos cookies","cookie_law.how_we_use_cookies_text":"Usamos cookies por vários motivos detalhados abaixo. Infelizmente, na maioria dos casos, não há opções padrão da indústria para desabilitar cookies sem desabilitar completamente a funcionalidade e os recursos que eles adicionam a este site. Recomenda-se que você deixe todos os cookies se não tiver certeza se precisa deles ou não, caso sejam usados para fornecer um serviço que você usa.","cookie_law.disabling_cookies":"Desativando cookies","cookie_law.disabling_cookies_text":"Você pode impedir a configuração de cookies ajustando as configurações do seu navegador (consulte a Ajuda do navegador para saber como fazer isso). Esteja ciente de que a desativação de cookies afetará a funcionalidade deste e de muitos outros sites que você visita. A desativação dos cookies normalmente resultará na desativação de certas funcionalidades e recursos deste site. Portanto, é recomendável que você não desative os cookies.","cookie_law.the_cookies_we_set":"Os cookies que definimos","cookie_law.site_preferences_cookie":"Cookies de preferências do site","cookie_law.site_preferences_cookie_text":"Para lhe proporcionar uma excelente experiência neste site, fornecemos a funcionalidade para definir as suas preferências de funcionamento deste site quando o utiliza. Para lembrar suas preferências, precisamos definir cookies para que essas informações possam ser chamadas sempre que você interagir com uma página afetada por suas preferências.","cookie_law.third_party_cookies":"Cookies de terceiros","cookie_law.third_party_cookies_text":"Em alguns casos especiais, também usamos cookies fornecidos por terceiros confiáveis. A seção a seguir detalha quais cookies de terceiros você pode encontrar neste site.","cookie_law.third_party_cookies_item_1":"Este site usa o Google Analytics, que é uma das soluções de análise mais difundidas e confiáveis na web para nos ajudar a entender como você usa o site e como podemos melhorar sua experiência. Esses cookies podem rastrear coisas como quanto tempo você passa no site e as páginas que você visita para que possamos continuar a produzir conteúdo envolvente. Para obter mais informações sobre os cookies do Google Analytics, consulte a página oficial do Google Analytics.","cookie_law.third_party_cookies_item_2":"De vez em quando, testamos novos recursos e fazemos mudanças sutis na maneira como o site é fornecido. Quando ainda estamos testando novos recursos, esses cookies podem ser usados para garantir que você receba uma experiência consistente enquanto estiver no site, garantindo que entendemos quais otimizações nossos usuários mais apreciam.","cookie_law.more_information":"Mais informações","cookie_law.more_information_text":"Esperamos que isso tenha esclarecido as coisas para você e, conforme mencionado anteriormente, se há algo que você não tem certeza se precisa ou não, geralmente é mais seguro deixar os cookies ativados, caso eles interajam com um dos recursos que você usa em nosso site. No entanto, se você ainda estiver procurando por mais informações, entre em contato conosco através de nossa "},"routed":true,"originalPath":"/blog/games/como-carregar-arquivos-de-forma-assincrona-com-o-phaser-3/","redirect":true,"redirectDefaultLanguageToRoot":false,"defaultLanguage":"en","fallbackLanguage":"","ignoredPaths":[]},"blogLocale":"pt-br"}},
    "staticQueryHashes": ["1156153307","1355482417","1591365477","1628619374","2127381735","2288279559","26159077","3566410298","3649515864","3847325417","3982724423","928834867"]}