{"html":"<p>Gatsby is a popular static site generator that is built on React, and it’s the one that I use to create this blog. With its powerful plugin system, it allows developers to easily add features to their sites.</p>\n<p>One feature that can be added is API endpoints, which can be used to serve JSON data to the client.</p>\n<p>In this post, we will look at how to add API endpoints to Gatsby v3 by modifying the <code class=\"language-text\">gatsby-node.js</code> file.</p>\n<p>First post of 2023, let’s go!!</p>\n<h2 id=\"the-problem\" style=\"position:relative;\"><a href=\"#the-problem\" aria-label=\"the problem permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The problem</h2>\n<p>In a Gatsby site, the data that is used to build pages is typically sourced from a variety of sources, such as <code class=\"language-text\">Markdown</code> files or a headless CMS.</p>\n<p>In my case, all my posts come from <code class=\"language-text\">Markdown</code> files, and I have some custom scripts to match related posts, get the blog post comments, etc.</p>\n<p>Since all my data is stored “offline”, if I want to access it in another application I would have to pretty much scrape my own website, and that’s not good.</p>\n<h2 id=\"the-solution\" style=\"position:relative;\"><a href=\"#the-solution\" aria-label=\"the solution permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The solution</h2>\n<p>If I create an API endpoint for my blog, then I can expose all data that is currently already public and displayed as <code class=\"language-text\">HTML</code>, but provide it as a “raw” JSON data.</p>\n<p>To add API endpoints to a Gatsby site, we need to take advantage of the <code class=\"language-text\">onPostBuild</code> lifecycle method in the <code class=\"language-text\">gatsby-node.js</code> file. This method is called after the site has been built, and allows us to perform additional actions, such as creating JSON files.</p>\n<p>Since I do a lot of custom scripting on all my pages, we are using a global variable called <code class=\"language-text\">jsonFiles</code> that will dynamically populate with data from the <code class=\"language-text\">onCreatePage</code> function.</p>\n<p>This will be used to store the data that we want to use to create the JSON files then loop through each path in the <code class=\"language-text\">jsonFiles</code> object and use the <code class=\"language-text\">createPage</code> action to create a new page for each <code class=\"language-text\">path</code>.</p>\n<p>Here is an example of how I’m doing it:</p>\n<div class=\"copy-code-block\"><button tabindex=\"0\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copy</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> writeFileSync <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> jsonFiles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onCreatePage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    jsonFiles<span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> page<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onPostBuild</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>jsonFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>filePath<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> fileFullPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>\n            __dirname<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'public'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">...</span>filePath<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">part</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> part<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>fileFullPath<span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<h2 id=\"consuming-the-data-from-the-api-endpoints\" style=\"position:relative;\"><a href=\"#consuming-the-data-from-the-api-endpoints\" aria-label=\"consuming the data from the api endpoints permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Consuming the data from the API endpoints</h2>\n<p>Once the API endpoints have been created, the next step is to consume the data from the client side. This can be done by using the <code class=\"language-text\">fetch()</code> function.</p>\n<p>Here is an example of how to use <code class=\"language-text\">fetch()</code> to get the data from the endpoint for this blog post:</p>\n<div class=\"copy-code-block\"><button tabindex=\"1\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copy</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://pablo.gg/en/blog/coding/creating-rest-api-endpoints-to-my-gatsby-blog.json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// { comments: [], html: '&lt;p&gt;..&lt;/p&gt;', language: 'en', path: 'blog-path', postHashId: 'hash', relatedPosts: [], title: 'Post title' }</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div></div>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Adding API endpoints to a Gatsby site is a simple task, but can enhance the possibilities of your website.</p>\n<p>I will soon (I hope) share what I plan to do with my own API 👀</p>\n<p>That’s all I have for you guys today, see you on the next one!</p>","path":"/en/blog/coding/creating-rest-api-endpoints-to-my-gatsby-blog/","title":"Creating Rest API endpoints to my Gatsby blog","language":"en","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIzLTAxLTIyVDAwOjAwOjAwLjAwMFo=","comments":[],"relatedPosts":[{"path":"/en/blog/coding/how-to-import-gatsby-posts-into-medium-with-gist-code-snippets/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTEwLTI0VDAwOjAwOjAwLjAwMFo=","title":"How to import Gatsby posts into Medium with Gist code snippets","date":"2021-10-24T00:00:00.000Z"},{"path":"/en/blog/coding/my-blog-now-has-stories-and-im-not-sure-why/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIzLTA5LTA0VDAwOjAwOjAwLjAwMFo=","title":"My blog now has Stories, and I'm not sure why","date":"2023-09-04T00:00:00.000Z"},{"path":"/en/blog/coding/creating-a-startup-with-github-actions-and-google-forms/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIyLTA5LTEzVDAwOjAwOjAwLjAwMFo=","title":"Creating a Startup with GitHub Actions and Google Forms","date":"2022-09-13T00:00:00.000Z"},{"path":"/en/blog/coding/musclog-leveraging-my-reactjs-experience-to-build-a-react-native-app/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDI0LTA5LTIxVDAwOjAwOjAwLjAwMFo=","title":"Musclog: Leveraging my React.js experience to build a React Native App","date":"2024-09-21T00:00:00.000Z"},{"path":"/en/blog/coding/how-to-get-the-redux-state-from-a-react-18-production-build-via-the-browsers-console/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIyLTA4LTIxVDAwOjAwOjAwLjAwMFo=","title":"How to get the Redux State in a React 18 production build via the browser's console","date":"2022-08-21T00:00:00.000Z"},{"path":"/en/blog/coding/adding-a-copy-button-to-code-snippets-on-gatsby-the-lazy-way/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIyLTA1LTA1VDAwOjAwOjAwLjAwMFo=","title":"Adding a copy button to code snippets on Gatsby: The lazy way","date":"2022-05-05T00:00:00.000Z"},{"path":"/en/blog/coding/how-to-get-the-redux-state-from-a-production-build-via-the-browsers-console/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIyLTAyLTIwVDAwOjAwOjAwLjAwMFo=","title":"How to get the Redux State in production via the browser's console","date":"2022-02-20T00:00:00.000Z"},{"path":"/en/blog/coding/i-made-a-top-down-game-version-of-my-blog-with-phaser-and-react/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTEwLTEyVDAwOjAwOjAwLjAwMFo=","title":"I made a top-down game version of my blog with Phaser and React","date":"2021-10-12T00:00:00.000Z"},{"path":"/en/blog/coding/how-to-create-a-top-down-rpg-maker-like-game-with-phaser-js-and-react/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTEwLTA4VDAwOjAwOjAwLjAwMFo=","title":"How to create a top-down RPG Maker like game with Phaser JS and React","date":"2021-10-08T00:00:00.000Z"},{"path":"/en/blog/coding/creating-a-dialog-box-with-react-for-a-phaser-game/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTEwLTA2VDAwOjAwOjAwLjAwMFo=","title":"Creating a dialog box with React for a Phaser game","date":"2021-10-06T00:00:00.000Z"}]}