{"html":"<p>When I was in college, web development wasn‚Äôt a major part of programming as it is these days, I didn‚Äôt have a single class on the web, and now I work with it every day. Pretty crazy.</p>\n<p>I remember learning some basic HTML back in school, around 1999, and making awesome looking websites like:</p>\n<p><img src=\"/e896371a7e308e9c9abee35bb587b61d/my-website.gif\" alt=\"My website\"></p>\n<h2 id=\"the-old-ways\" style=\"position:relative;\"><a href=\"#the-old-ways\" aria-label=\"the old ways permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The old ways</h2>\n<p>Back in the old (Dreamweaver) days if I wanted to make a website, I would have something like this:</p>\n<div class=\"copy-code-block\"><button tabindex=\"0\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copy</span></button><div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">- website\n  - index.html\n  - about.html\n  - contact.html</code></pre></div></div>\n<p>Then for each of those files, I would have to write the full HTML for that page, even if all of them had the same header or logo, etc. In this example, there is no database, no dynamic data, no compilation, the website is 100% static, I can simply open these files in my browser locally and everything will work without the need of servers because HTML is pretty much just a plain text with steroids.</p>\n<p>Of course, this is far from ideal, so other solutions like PHP came in to allow us to make things a bit more dynamic.</p>\n<h2 id=\"not-that-old-ways\" style=\"position:relative;\"><a href=\"#not-that-old-ways\" aria-label=\"not that old ways permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Not that old ways</h2>\n<p>With PHP, I can split my HTML template into re-usable chunks, so I could easily boot up a WordPress website and set up the whole header layout, and then focus only on creating the content for the website.</p>\n<p>The problem is that my browser doesn‚Äôt understand PHP, so I need a server to convert all the PHP logic into static HTML, so every time someone requested to see a page on my website, the request would go to my server, which will process the PHP code and serve an HTML page and of course, this costs way more than simply serving static HTML files.</p>\n<p>A PHP website file structure would have something like this:</p>\n<div class=\"copy-code-block\"><button tabindex=\"1\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copy</span></button><div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">- website\n      - index.php\n      - header.php\n      - footer.php\n  - content\n      - home.php\n      - about.php\n      - contact.php</code></pre></div></div>\n<p>This is where most of the websites are now, and with a good reason, Web 2.0 is complex and dynamics is needed‚Ä¶ for most cases at least, but what about sites that barely change like blogs or portfolios?</p>\n<h2 id=\"the-new-way---jamstack\" style=\"position:relative;\"><a href=\"#the-new-way---jamstack\" aria-label=\"the new way   jamstack permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The new way - JAMStack</h2>\n<p>JAMStack stands for <code class=\"language-text\">JavaScript, API &amp; Markup - Stack</code> and it‚Äôs here to bring the best of the old ways into our lives. With JAMStack I can create my website the same way I‚Äôd do it using PHP, but instead of having the data processed on every request, I can code my whole website, pre-compile it once, and then serve it as static HTML + JavaScript files. This is super useful for websites like this one, and this technique is nothing new, all our desktop apps are pre-compiled and served ‚Äústatically‚Äù - let‚Äôs forget about SaaS for a second ok?</p>\n<p>For example on this website, I have a template for a blog post page, and then I fill this template with data from a Markdown file. This file structure is something like this:</p>\n<div class=\"copy-code-block\"><button tabindex=\"2\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copy</span></button><div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">- website\n      - index.html\n  - pages\n      - home.html\n      - contact.html\n  - templates\n      - blog-posts.html\n  - content\n      - my-first-post.md\n      - my-second-post.md</code></pre></div></div>\n<p>I‚Äôm using Gatsby to make <a href=\"https://pablo.gg/\" target=\"_blank\" rel=\"noreferrer\">this</a> website, so I can write everything using React components, and the Gatsby framework compiles everything into a bunch of HTML files that are served to the browser.</p>\n<h2 id=\"where-to-start\" style=\"position:relative;\"><a href=\"#where-to-start\" aria-label=\"where to start permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Where to start?</h2>\n<p>Before trying Gatsby, I started with <a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noreferrer\">Jekyll</a>, which was a way to create a <a href=\"https://jekyllrb.com/docs/github-pages/\" target=\"_blank\" rel=\"noreferrer\">JAMStack blog and deploy it for free on GitHub Pages</a>, that‚Äôs all I needed, but first I had to convert all my posts from my 12 years old WordPress blog into Markdown files with <a href=\"https://hexo.io/docs/front-matter.html\" target=\"_blank\" rel=\"noreferrer\">frontmatter</a> variables.</p>\n<p>WordPress posts are (generally) stored in a database, so I need a way to pull these data and save it as a Markdown file, and the easiest way is to simply use a WordPress plugin, like <a href=\"https://github.com/benbalter/wordpress-to-jekyll-exporter\" target=\"_blank\" rel=\"noreferrer\">wordpress-to-jekyll-exporter</a>. If you don‚Äôt have access to your blog anymore, but still have your <code class=\"language-text\">database.sql</code> file (like me üòÖ) just <a href=\"https://wordpress.org/support/article/installing-wordpress-on-your-own-computer/\" target=\"_blank\" rel=\"noreferrer\">boot up a local version of WordPress</a> to exports your posts.</p>\n<p>I also created a <a href=\"https://gist.github.com/blopa/a6e49c798cf0fd5c875025c6ae282064\" target=\"_blank\" rel=\"noreferrer\">Python script</a> to change some data from the generated Markdown files to fit some of my needs.</p>\n<p>I had over 100 posts in my old blog, so it was a big surprise to me to know that there was <a href=\"https://pages.github.com/versions/\" target=\"_blank\" rel=\"noreferrer\">no way to use a Jekyll pagination plugin v2</a> and automatically deploy it to GitHub Pages, so I decided to look for other solutions.</p>\n<h2 id=\"the-great-gatsby\" style=\"position:relative;\"><a href=\"#the-great-gatsby\" aria-label=\"the great gatsby permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Great Gatsby</h2>\n<p>Since I already know React, going with Gatsby was a no-brainer, and they have excellent documentation and lots of plugins and tutorials and with the release of <a href=\"https://github.com/features/actions\" target=\"_blank\" rel=\"noreferrer\">GitHub Actions</a>, it was possible to build and deploy Gatsby within the GitHub environment without having to use an external service like <a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noreferrer\">travis-ci.org</a>. Not only that, but I could even have my source-code in a private repo and deploy it to a public repo, this way I can have draft posts without them being public in the codebase.</p>\n<p>First I made <a href=\"https://github.com/blopa/gatsby-material-ui-starter\" target=\"_blank\" rel=\"noreferrer\">this</a> repo based on the instructions from <a href=\"https://github.com/mui-org/material-ui/tree/master/examples/gatsby\" target=\"_blank\" rel=\"noreferrer\">this</a> MUI repo. All it does is link together the Material UI React library into Gatsby.</p>\n<p>The next step was getting the <a href=\"https://github.com/blopa/gatsby-material-ui-starter\" target=\"_blank\" rel=\"noreferrer\">gatsby-material-ui-starter</a> as a template to add all my blog logic, but first I needed a list of all the features I wanted in my blog, and those were:</p>\n<ul>\n<li>Home page with posts listing</li>\n<li>Blog page with posts listing</li>\n<li>Blog post page with related posts</li>\n<li>Archive page with pagination</li>\n<li>Comments section</li>\n<li>Contact page</li>\n<li>Albums page with photos from Google Photos</li>\n<li>Search</li>\n<li>NO SERVERS</li>\n</ul>\n<p>Everything sounds pretty reasonable until you remember this all needs to be done with JAMStack and no servers. Is this even possible? Yes, it is. Gatsby and React are really powerful tools.</p>\n<h2 id=\"posts-listing-and-related-posts\" style=\"position:relative;\"><a href=\"#posts-listing-and-related-posts\" aria-label=\"posts listing and related posts permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Posts listing and related posts</h2>\n<p>Gatsby gives me a simple GraphQL API to get data from my Markdown files, and this can be done easily using the <a href=\"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-transformer-remark\" target=\"_blank\" rel=\"noreferrer\">gatsby-transformer-remark</a> plugin, so then I can query my posts with:</p>\n<div class=\"copy-code-block\"><button tabindex=\"3\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copy</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    query Posts($locale: String) {\n        allMarkdownRemark(\n            filter: {\n                fields: { locale: { eq: $locale } }\n                frontmatter: { show: { eq: true } }\n            }\n            sort: { fields: [frontmatter___date], order: DESC }\n        ) {\n            edges {\n                node {\n                    excerpt\n                    fields {\n                        slug\n                        path\n                        locale\n                    }\n                    frontmatter {\n                        date\n                        title\n                    }\n                }\n            }\n        }\n    }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>If you want to know more on how to create your own Gatsby blog from scratch, please follow <a href=\"https://www.gatsbyjs.com/blog/2017-07-19-creating-a-blog-with-gatsby/\" target=\"_blank\" rel=\"noreferrer\">their official tutorial</a> on it.</p>\n<p>For the related posts, I decided to get all my posts and check on each one of them which other posts had the most common tags with it, and then add the top 3 related posts to that post related posts, this might not be the most efficient way to do this, but remember that I‚Äôm only compiling the website once, so that‚Äôs ok üòä</p>\n<h2 id=\"pagination\" style=\"position:relative;\"><a href=\"#pagination\" aria-label=\"pagination permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pagination</h2>\n<p>Material UI already has a <a href=\"https://material-ui.com/components/pagination/\" target=\"_blank\" rel=\"noreferrer\">pagination component</a>, so I created an <code class=\"language-text\">Archive.jsx</code> template that takes a list of posts, a total pages number and the number of the current page, and then during the <a href=\"https://www.gatsbyjs.com/docs/reference/config-files/gatsby-node/\" target=\"_blank\" rel=\"noreferrer\">Gatsby compilation process</a> I create a bunch of archive pages using my template and that‚Äôs it, easy!</p>\n<h2 id=\"search\" style=\"position:relative;\"><a href=\"#search\" aria-label=\"search permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Search</h2>\n<p>Since Gatsby uses super modern JavaScript technologies, creating a local search should be pretty easy, right? YES! There is even <a href=\"https://github.com/angeloashmore/gatsby-plugin-local-search\" target=\"_blank\" rel=\"noreferrer\">a plugin</a> for it already! Noice!</p>\n<p>Just follow <a href=\"https://labs.walltowall.com/easy-client-side-search-for-gatsby-sites/\" target=\"_blank\" rel=\"noreferrer\">this tutorial</a> and combine the code with the <a href=\"https://material-ui.com/components/autocomplete/\" target=\"_blank\" rel=\"noreferrer\">Material UI autocomplete component</a> to create a <code class=\"language-text\">SearchBar</code> component like the one in this blog.</p>\n<h2 id=\"google-photos-integration\" style=\"position:relative;\"><a href=\"#google-photos-integration\" aria-label=\"google photos integration permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Google Photos integration</h2>\n<p>The bad part about JAMStack is that my git repo will contain not only all my codebase, but also all my content data, including photos, etc, and this can get real big real fast.</p>\n<p>Of course, I could consume my data from an external API instead of from Markdown files and this will already help a bit, but being able to not store photos in the repo will save a lot of space.</p>\n<p>Thanks to <a href=\"https://medium.com/@ValentinHervieu/how-i-used-google-photos-to-host-my-website-pictures-gallery-d49f037c8e3c\" target=\"_blank\" rel=\"noreferrer\">this nice post</a> by <a href=\"https://medium.com/@ValentinHervieu\" target=\"_blank\" rel=\"noreferrer\">@ValentinHervieu</a> we can get an idea on how to get the images URL from a Google Photos album URL, I can simply follow that post and add the code to my Gatsby building process.</p>\n<h2 id=\"multi-languages\" style=\"position:relative;\"><a href=\"#multi-languages\" aria-label=\"multi languages permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multi-languages</h2>\n<p>As Portuguese is my native language, and I live outside Brazil, it is useful to be able to write posts in multiple languages, to be able to share them with my friends here and in Brazil, and for that, I need to add functionality to be able to create posts in different languages, and obviously <a href=\"https://github.com/wiziple/gatsby-plugin-intl\" target=\"_blank\" rel=\"noreferrer\">there is a Gatsby plugin for that</a>.</p>\n<p>This plugin is based on the famous <a href=\"https://formatjs.io/docs/react-intl/\" target=\"_blank\" rel=\"noreferrer\">React Intl</a>, and is very simple to use, just add a new object in the Gatsby plugin settings to pass an array with the codes of the languages you want to add and a path to where the translations for those languages will be. See below how this object looks like for this blog:</p>\n<div class=\"copy-code-block\"><button tabindex=\"4\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copy</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token string\">'gatsby-plugin-intl'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/src/intl</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">languages</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pt-br'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">defaultLanguage</span><span class=\"token operator\">:</span> <span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">redirectComponent</span><span class=\"token operator\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src/utils/redirect.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>What this will do is whenever you create a page like <code class=\"language-text\">/contact/</code>, it will create a new page for each of the languages that you configured it for, like <code class=\"language-text\">/en/contact/</code> and <code class=\"language-text\">/pt-br/contact/</code>. Awesome. But what about blog posts? I don‚Äôt want to have paths like <code class=\"language-text\">/en/hello-world/</code> and <code class=\"language-text\">/pt-br/hello-world/</code>, I want <code class=\"language-text\">/en/hello-world/</code> and <code class=\"language-text\">/pt-br/ola-mundo/</code>.</p>\n<p>To have the same blog post in different languages, I create markdown files like <code class=\"language-text\">hello-world.en.md</code> and <code class=\"language-text\">hello-world.pt-br.md</code> and then I link them by the post title and post date, this way I can switch the language in the blog post page, and then see that same post in another language.</p>\n<p><img src=\"/2105ea55eebac25b4267be0420fbb6e5/language-switcher.gif\" alt=\"Language switcher\"></p>\n<h2 id=\"contact-page-and-comments-section\" style=\"position:relative;\"><a href=\"#contact-page-and-comments-section\" aria-label=\"contact page and comments section permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contact page and comments section</h2>\n<p>There are a couple of services that offer commenting systems to your website, like <a href=\"https://disqus.com/\" target=\"_blank\" rel=\"noreferrer\">disqus.com</a> and <a href=\"https://developers.facebook.com/docs/plugins/comments/\" target=\"_blank\" rel=\"noreferrer\">Facebook Comments</a>, but Disqus‚Äô free plan will add ads to your site, and Facebook will require users to have a Facebook account to use it.</p>\n<p>After some research, I found out that it‚Äôs possible to use <a href=\"https://blog.webjeda.com/google-form-customize/\" target=\"_blank\" rel=\"noreferrer\">Google Forms as a commenting system</a> for my JAMStack blog.</p>\n<p>The comment data is stored in a Google Spreadsheet on your Google Drive, which can then be accessed in the Gatsby build process to pass all the comments to the appropriate blog posts.</p>\n<p>One caveat of using this system is that if I want the new comments to show up in my blog, I need to rebuild everything again, but let‚Äôs think of that as a process to approve/disapprove comments üòÑ, but also <a href=\"https://www.gatsbyjs.com/docs/reference/release-notes/v3.0/#incremental-builds-in-oss\" target=\"_blank\" rel=\"noreferrer\">if you configure everything properly, Gatsby rebuilds can be quite smart and cheap</a>.</p>\n<h2 id=\"github-actions\" style=\"position:relative;\"><a href=\"#github-actions\" aria-label=\"github actions permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub Actions</h2>\n<p>After all the coding and hacking, all that is left is to use GitHub Actions to build and deploy my website, and for that I simply create a <code class=\"language-text\">.github/workflows/deploy.yml</code> file in my GitHub repo with the following settings:</p>\n<div class=\"copy-code-block\"><button tabindex=\"5\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copy</span></button><div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to GitHub Pages\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">workflow_dispatch</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build-and-deploy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2.3.4\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">persist-credentials</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install and Build üöß\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          npm cache clean --force\n          npm install\n          npm run clean\n          npm run build</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy üöÄ\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> JamesIves/github<span class=\"token punctuation\">-</span>pages<span class=\"token punctuation\">-</span>deploy<span class=\"token punctuation\">-</span>action@4.1.1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.ACCESS_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">repository-name</span><span class=\"token punctuation\">:</span> blopa/pablo.gg\n          <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> gh<span class=\"token punctuation\">-</span>pages\n          <span class=\"token key atrule\">folder</span><span class=\"token punctuation\">:</span> public\n          <span class=\"token key atrule\">clean</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n          <span class=\"token key atrule\">single-commit</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div></div>\n<p>This will build the website every time I push to the <code class=\"language-text\">main</code> branch and then deploy it to <a href=\"https://github.com/blopa/pablo.gg\" target=\"_blank\" rel=\"noreferrer\">github.com/blopa/pablo.gg</a> so it can be accessed via <a href=\"https://pablo.gg/\" target=\"_blank\" rel=\"noreferrer\">https://pablo.gg/</a>.</p>\n<h2 id=\"why\" style=\"position:relative;\"><a href=\"#why\" aria-label=\"why permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why</h2>\n<p>You might be wonder ‚Äúwhy don‚Äôt you simply spin a $1.00 server and run WordPress?‚Äù, and I tell you why, it‚Äôs not only a case of saving money, but it‚Äôs also one thing less to care about, and if I die or get into a coma I don‚Äôt know, my website will still be only - as long as GitHub Pages is available and free. And by using JAMStack you will automatically decrease de processing power used to serve your website, which then will also decrease CO2 emission and save the planet (or at least help a bit).</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Not only I learned a new React framework, but I also have a nice and light personal blog with $0.00 cost of hosting, and even if one day GitHub Actions and GitHub Pages go offline, I can still build my blog locally and deploy to any static hosting that would cost very little per year, so yay!</p>\n<p>Of course, I end up paying for the <a href=\"https://godaddy.com/tlds/gg-domain\" target=\"_blank\" rel=\"noreferrer\">.gg domain</a>, but if you want to go <em>full frugal</em> you can simply host your website using free domains like <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noreferrer\">github.io</a> or <a href=\"https://freenom.com\" target=\"_blank\" rel=\"noreferrer\">freenom.com</a>.</p>","path":"/en/blog/coding/i-pay-0-in-hosting-for-this-website/","title":"I pay $0.00 in hosting for this website","language":"en","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTA0LTE3VDAwOjAwOjAwLjAwMFo=","comments":[{"comment":"Cool. Big data 5 head brain. Love it. ","name":"Luca","date":"4/19/2021 0:14:03"}],"relatedPosts":[{"path":"/en/blog/coding/creating-a-startup-with-github-actions-and-google-forms/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIyLTA5LTEzVDAwOjAwOjAwLjAwMFo=","title":"Creating a Startup with GitHub Actions and Google Forms","date":"2022-09-13T00:00:00.000Z"},{"path":"/en/blog/coding/how-to-create-an-offline-search-page-with-gatsby/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTA1LTI5VDAwOjAwOjAwLjAwMFo=","title":"How to create an offline search page with Gatsby","date":"2021-05-29T00:00:00.000Z"},{"path":"/en/blog/coding/using-github-actions-to-deploy-my-blog-into-different-domains/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTA1LTE1VDAwOjAwOjAwLjAwMFo=","title":"Using GitHub Actions to deploy my blog into different domains","date":"2021-05-15T00:00:00.000Z"},{"path":"/en/blog/coding/using-nodejs-and-github-action-to-find-a-house-on-fundanl/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIyLTAzLTEyVDAwOjAwOjAwLjAwMFo=","title":"Using Node.js and GitHub Action to find a house on Funda.nl","date":"2022-03-12T00:00:00.000Z"},{"path":"/en/blog/coding/how-to-import-gatsby-posts-into-medium-with-gist-code-snippets/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTEwLTI0VDAwOjAwOjAwLjAwMFo=","title":"How to import Gatsby posts into Medium with Gist code snippets","date":"2021-10-24T00:00:00.000Z"},{"path":"/en/blog/coding/building-a-dynamic-form-from-a-json-schema/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTA1LTIxVDAwOjAwOjAwLjAwMFo=","title":"Building a dynamic form from a JSON schema","date":"2021-05-21T00:00:00.000Z"},{"path":"/en/blog/coding/my-blog-now-has-stories-and-im-not-sure-why/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIzLTA5LTA0VDAwOjAwOjAwLjAwMFo=","title":"My blog now has Stories, and I'm not sure why","date":"2023-09-04T00:00:00.000Z"},{"path":"/en/blog/coding/adding-a-copy-button-to-code-snippets-on-gatsby-the-lazy-way/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIyLTA1LTA1VDAwOjAwOjAwLjAwMFo=","title":"Adding a copy button to code snippets on Gatsby: The lazy way","date":"2022-05-05T00:00:00.000Z"},{"path":"/en/blog/coding/sharing-encrypted-laravel-cookies-with-next-js/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDI0LTEwLTI1VDAwOjAwOjAwLjAwMFo=","title":"Sharing encrypted Laravel cookies with Next.js","date":"2024-10-25T00:00:00.000Z"},{"path":"/en/blog/coding/tracking-my-working-hours-on-personal-projects-ssing-nodejs/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDI0LTA2LTE2VDAwOjAwOjAwLjAwMFo=","title":"Tracking my working hours on personal projects using Node.js","date":"2024-06-16T00:00:00.000Z"}]}