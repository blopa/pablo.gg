{"html":"<p>Gatsby é um gerador de sites estáticos popular que é construído com React, e é o que eu uso para criar este blog. Com seu sistema de plugins poderoso, ele permite que os desenvolvedores adicionem facilmente recursos aos seus sites.</p>\n<p>Uma característica que pode ser adicionada são os endpoints da API, que podem ser usados para servir dados JSON ao cliente.</p>\n<p>Neste post, vamos ver como adicionar endpoints da API ao Gatsby v3, modificando o arquivo <code class=\"language-text\">gatsby-node.js</code>.</p>\n<p>Primeiro post de 2023, vamos lá!!</p>\n<h2 id=\"o-problema\" style=\"position:relative;\"><a href=\"#o-problema\" aria-label=\"o problema permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>O problema</h2>\n<p>Em um site feito com Gatsby, os dados usados para construir as páginas geralmente são provenientes de uma variedade de fontes, como arquivos <code class=\"language-text\">Markdown</code> ou um headless CMS.</p>\n<p>No meu caso, todos os meus posts vêm de arquivos <code class=\"language-text\">Markdown</code>, e eu tenho alguns scripts personalizados para corresponder a posts relacionados, obter comentários do post do blog, etc.</p>\n<p>Como todos os meus dados estão armazenados “offline”, se eu quiser acessá-los em outra aplicação, eu teria que praticamente raspar o meu próprio site e isso não é bom.</p>\n<h2 id=\"a-solucao\" style=\"position:relative;\"><a href=\"#a-solucao\" aria-label=\"a solucao permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A solução</h2>\n<p>Se eu criar um ponto final de API para o meu blog, então posso expor todos os dados que atualmente já são públicos e exibidos como <code class=\"language-text\">HTML</code>, mas fornecer como dados “brutos” JSON.</p>\n<p>Para adicionar endpoints da API a um site feito com Gatsby, precisamos aproveitar o método de ciclo de vida <code class=\"language-text\">onPostBuild</code> no arquivo <code class=\"language-text\">gatsby-node.js</code>. Este método é chamado depois que o site foi construído e nos permite realizar ações adicionais, como criar arquivos JSON.</p>\n<p>Como eu faço muitos scripts personalizados em todas as minhas páginas, estamos usando uma variável global chamada <code class=\"language-text\">jsonFiles</code> que será preenchida dinamicamente com dados da função <code class=\"language-text\">onCreatePage</code>.</p>\n<p>Isso será usado para armazenar os dados que queremos usar para criar os arquivos JSON e, em seguida, percorrer cada caminho no objeto <code class=\"language-text\">jsonFiles</code> e usar a ação createPage para criar uma nova página para cada caminho.</p>\n<p>Aqui está um exemplo de como estou fazendo isso:</p>\n<div class=\"copy-code-block\"><button tabindex=\"0\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copiar</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> writeFileSync <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> jsonFiles <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onCreatePage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    jsonFiles<span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> page<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onPostBuild</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>jsonFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>filePath<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> fileFullPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>\n            __dirname<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'public'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">...</span>filePath<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">part</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> part<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>fileFullPath<span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<h2 id=\"consumindo-os-dados-dos-endpoints-da-api\" style=\"position:relative;\"><a href=\"#consumindo-os-dados-dos-endpoints-da-api\" aria-label=\"consumindo os dados dos endpoints da api permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Consumindo os dados dos endpoints da API</h2>\n<p>Agora que os endpoints da API foram criados, o próximo passo é consumir os dados do lado do cliente. Isso pode ser feito usando a função <code class=\"language-text\">fetch()</code>.</p>\n<p>Aqui está um exemplo de como usar <code class=\"language-text\">fetch()</code> para obter os dados do ponto final para este post do blog:</p>\n<div class=\"copy-code-block\"><button tabindex=\"1\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copiar</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://pablo.gg/pt-br/blog/coding/criando-api-endpoints -para-o-meu-blog-em-gatsby.json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// { comments: [], html: '&lt;p&gt;..&lt;/p&gt;', language: 'pt-br', path: 'blog-path', postHashId: 'hash', relatedPosts: [], title: 'Titulo' }</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div></div>\n<h2 id=\"conclusao\" style=\"position:relative;\"><a href=\"#conclusao\" aria-label=\"conclusao permalink\" class=\"post-headers-link before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusão</h2>\n<p>Adicionar pontos finais de API a um site Gatsby é uma tarefa simples, mas pode aumentar as possibilidades do seu site.</p>\n<p>Em breve (espero) compartilharei o que planejo fazer com minha própria API 👀</p>\n<p>Isso é tudo que tenho para vocês hoje, até a próxima!</p>","path":"/pt-br/blog/coding/criando-api-endpoints-para-o-meu-blog-em-gatsby/","title":"Criando API endpoints  para o meu blog em Gatsby","language":"pt-br","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIzLTAxLTIyVDAwOjAwOjAwLjAwMFo=","comments":[],"relatedPosts":[{"path":"/pt-br/blog/coding/como-importar-posts-com-sintaxe-de-codigo-colorida-no-medium-usando-o-gatsby/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTEwLTI0VDAwOjAwOjAwLjAwMFo=","title":"Como importar posts com sintaxe de código colorida no Medium usando o Gatsby","date":"2021-10-24T00:00:00.000Z"},{"path":"/pt-br/blog/coding/meu-blog-tem-stories-agora-mas-nao-me-pergunte-por-que/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIzLTA5LTA0VDAwOjAwOjAwLjAwMFo=","title":"Meu blog tem Stories agora, mas não me pergunte por quê","date":"2023-09-04T00:00:00.000Z"},{"path":"/pt-br/blog/coding/criando-uma-startup-com-github-actions-e-google-forms/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIyLTA5LTEzVDAwOjAwOjAwLjAwMFo=","title":"Criando uma Startup com GitHub Actions e Google Forms","date":"2022-09-13T00:00:00.000Z"},{"path":"/pt-br/blog/coding/musclog-aproveitando-minha-experiencia-com-reactjs-para-criar-um-app-em-react-native/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDI0LTA5LTIxVDAwOjAwOjAwLjAwMFo=","title":"Musclog: Aproveitando minha experiência com React.js para criar um App em React Native","date":"2024-09-21T00:00:00.000Z"},{"path":"/pt-br/blog/coding/como-acessar-o-state-do-redux-de-um-build-de-producao-do-react-18/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIyLTA4LTIxVDAwOjAwOjAwLjAwMFo=","title":"Como acessar o state do Redux de um build de produção do React 18","date":"2022-08-21T00:00:00.000Z"},{"path":"/pt-br/blog/coding/adicionando-botao-para-copiar-code-snippets-no-gatsby-gambiarra/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIyLTA1LTA1VDAwOjAwOjAwLjAwMFo=","title":"Adicionando botão para copiar code snippets no Gatsby (gambiarra)","date":"2022-05-05T00:00:00.000Z"},{"path":"/pt-br/blog/coding/como-acessar-o-estado-do-redux-de-um-production-build-usando-o-console-do-browser/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIyLTAyLTIwVDAwOjAwOjAwLjAwMFo=","title":"Como acessar o state do Redux em produção usando o console do browser","date":"2022-02-20T00:00:00.000Z"},{"path":"/pt-br/blog/coding/eu-criei-um-jogo-para-acessar-o-conteudo-do-meu-blog-com-phaser-e-react/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTEwLTEyVDAwOjAwOjAwLjAwMFo=","title":"Eu criei um jogo para o acessar o conteúdo do meu blog com Phaser e React","date":"2021-10-12T00:00:00.000Z"},{"path":"/pt-br/blog/coding/como-criar-um-jogo-estilo-rpg-maker-com-phaser-e-react/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTEwLTA4VDAwOjAwOjAwLjAwMFo=","title":"Como criar um jogo estilo RPG Maker com Phaser e React","date":"2021-10-08T00:00:00.000Z"},{"path":"/pt-br/blog/coding/criando-uma-caixa-de-dialogo-com-react-para-o-meu-jogo-em-phaser/","postHashId":"Y29kaW5ndHJ1ZW51bGwyMDIxLTEwLTA2VDAwOjAwOjAwLjAwMFo=","title":"Criando uma caixa de diálogo com React para o meu jogo em Phaser","date":"2021-10-06T00:00:00.000Z"}]}