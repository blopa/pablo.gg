{"html":"<p>Vamos lá, se prepare pois o devlog de hoje é longo, mas vale a pena. Eu estou muito feliz que eu consegui fazer esse devlog, afinal Cyberpunk 2077 saiu essa semana e eu comecei a jogar no Stadia! O devlog de hoje está longo porque quero explicar o motivo pelo qual estou fazendo certas coisas.</p>\n<p>Hoje vou mostrar como melhorei a AI dos inimigos do jogo e por que lido com tantos edge cases no meu código. Bora lá!</p>\n<p></p><div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.42857142857143%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\"> <div class=\"embedVideo-container\"> <iframe title=\"\" src=\"https://www.youtube.com/embed/KoCubm17q8s?rel=0\" class=\"embedVideo-iframe\" style=\"border:0; position: absolute; top: 0; left: 0; width: 100%; height: 100%; \" loading=\"eager\" allowfullscreen=\"\" sandbox=\"allow-same-origin allow-scripts allow-popups\"></iframe> </div> </div><p></p>\n<p>Minha primeira tentativa no algoritmo de AI foi calculá-lo em tempo de execução, então onde quer que eu colocasse um inimigo, ele se moveria e calcularia se deveria girar ou não em cada frame, isso era muito pesado para o processador, especialmente quando eu tinha muitos inimigos na tela ao mesmo tempo.</p>\n<p>Havia duas maneiras de abordar esse problema, uma seria criar manualmente um path estático no Tiled e fazer o inimigo seguir esse path, mas sempre que adicionar um novo inimigo, eu teria que adicionar um path para ele também, e isso pode acaba sendo um trabalho super tedioso, sem contar às vezes que eu com certeza esqueceria de adicionar o path. Complicado.</p>\n<p>A segunda opção é ao invés de calcular o comportamento do inimigo em cada frame, eu poderia pré-calcular todos eles assim que a fase fosse carregada, e então definir esse path estaticamente, desta forma eu teria a liberdade de adicionar inimigos onde eu quisesse no Tiled, sem ter que adicionar paths extras para eles seguirem e também manter a taxa de frames estável por não processar a lógica do inimigo em cada frame.</p>\n<p>Então, como eu fiz isso? Primeiro, há alguns edge cases que eu preciso lidar, tipo e se o inimigo não estiver em uma plataforma ou chão? Ou e se a plataforma não tiver bordas? Eu sei que eu mesmo estarei fazendo as fases no Tiled, mas é bom lidar com esses problemas de qualquer forma, porque nunca sabemos quais bugs o futuro nos reserva.</p>\n<p>Já que eu não tenho como saber se o inimigo já está em uma plataforma ou não, eu preciso esperar a física do jogo entrar em ação e calcular a posição do inimigo, como à gravidade e outras coisas, então ao invés de calcular a AI estática no <code class=\"language-text\">construtor</code>, estou fazendo isso na função <code class=\"language-text\">update</code> e, depois de calculado, simplesmente “removo” a função <code class=\"language-text\">update</code> substituindo-a por uma função <code class=\"language-text\">no-op</code> (no operation).</p>\n<div class=\"copy-code-block\"><button tabindex=\"0\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copiar</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Enemy</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GameObjects<span class=\"token punctuation\">.</span>Sprite</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> scene<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> asset <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> asset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>staticAi <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">PLATFORM_WALKING</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aiColliders <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time<span class=\"token punctuation\">,</span> delta</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aiColliders<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// we don't need the update function anymore</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>staticAi<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aiStrategy</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aiStrategy <span class=\"token operator\">===</span> <span class=\"token constant\">PLATFORM_WALKING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// first check if the enemy is on a platform</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>touchingDownObject<span class=\"token operator\">?.</span>layer<span class=\"token operator\">?.</span>tilemapLayer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// then calculate the colliders that will make the enemy change direction</span>\n                    <span class=\"token keyword\">const</span> colliders <span class=\"token operator\">=</span> <span class=\"token function\">staticPlatformWalkingBehavior</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>touchingDownObject<span class=\"token punctuation\">.</span>layer<span class=\"token punctuation\">.</span>tilemapLayer\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// TODO concat array</span>\n                    colliders<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">collider</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>aiColliders<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>collider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Enemy<span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>E então toda a mágica acontece dentro do <code class=\"language-text\">staticPlatformWalkingBehavior</code>, que honestamente é super simples e zero mágica, eu só preciso pegar a layer de colisão do inimigo e verificar se há uma borda na plataforma em ambas as direções. O único problema dessa função é que não quero que ela rode para sempre até encontrar uma borda, porque talvez a plataforma não tenha uma borda, quem sabe? Então, em vez disso, executarei esse loop para cada tile que eu tenho dentro da largura do mapa.</p>\n<div class=\"copy-code-block\"><button tabindex=\"1\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copiar</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">staticPlatformWalkingBehavior</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">gameObject<span class=\"token punctuation\">,</span>\n    dynamicLayer</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> scene <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> gameObject<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> divider <span class=\"token operator\">=</span> <span class=\"token constant\">TILE_WIDTH</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> loopSize <span class=\"token operator\">=</span> scene<span class=\"token punctuation\">.</span>mapData<span class=\"token punctuation\">.</span>tileSize<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> divider<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> layers <span class=\"token operator\">=</span> dynamicLayer<span class=\"token operator\">?.</span>getChildren<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span>dynamicLayer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// for each collision layer</span>\n    layers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">layer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// for each direction</span>\n        <span class=\"token punctuation\">[</span><span class=\"token constant\">FACING_RIGHT</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FACING_LEFT</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">direction</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// for each tile of the map * divider</span>\n            <span class=\"token keyword\">let</span> lastGroundTile<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>loopSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">const</span> multiplier <span class=\"token operator\">=</span> direction <span class=\"token operator\">===</span> <span class=\"token constant\">FACING_RIGHT</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">const</span> posX <span class=\"token operator\">=</span> gameObject<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> multiplier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">const</span> groundTile <span class=\"token operator\">=</span> layer<span class=\"token punctuation\">.</span><span class=\"token function\">getTileAtWorldXY</span><span class=\"token punctuation\">(</span>\n                        posX<span class=\"token punctuation\">,</span>\n                        gameObject<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">const</span> tile <span class=\"token operator\">=</span> layer<span class=\"token punctuation\">.</span><span class=\"token function\">getTileAtWorldXY</span><span class=\"token punctuation\">(</span>\n                        posX<span class=\"token punctuation\">,</span>\n                        gameObject<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// check for collisions</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n                        <span class=\"token operator\">!</span>groundTile<span class=\"token operator\">?.</span>properties<span class=\"token operator\">?.</span>collideUp\n                        <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>direction <span class=\"token operator\">===</span> <span class=\"token constant\">FACING_RIGHT</span> <span class=\"token operator\">&amp;&amp;</span> tile<span class=\"token operator\">?.</span>properties<span class=\"token operator\">?.</span>collideLeft<span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>direction <span class=\"token operator\">===</span> <span class=\"token constant\">FACING_LEFT</span> <span class=\"token operator\">&amp;&amp;</span> tile<span class=\"token operator\">?.</span>properties<span class=\"token operator\">?.</span>collideRight<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">let</span> newPosX <span class=\"token operator\">=</span>\n                            lastGroundTile<span class=\"token operator\">?.</span>pixelX\n                            <span class=\"token operator\">||</span> tile<span class=\"token operator\">?.</span>pixelX\n                            <span class=\"token operator\">||</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>posX <span class=\"token operator\">/</span> <span class=\"token constant\">TILE_WIDTH</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token constant\">TILE_WIDTH</span><span class=\"token punctuation\">;</span>\n                        newPosX <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">TILE_WIDTH</span> <span class=\"token operator\">*</span> multiplier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                        <span class=\"token comment\">// create a custom collider object</span>\n                        <span class=\"token keyword\">const</span> platformLimitCollider <span class=\"token operator\">=</span> <span class=\"token function\">createInteractiveGameObject</span><span class=\"token punctuation\">(</span>\n                            gameObject<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">,</span>\n                            newPosX<span class=\"token punctuation\">,</span>\n                            gameObject<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token constant\">TILE_HEIGHT</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token constant\">TILE_WIDTH</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token constant\">TILE_HEIGHT</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token string\">'something'</span>\n                        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                        <span class=\"token comment\">// create a collision between the gameobject and the custom collider</span>\n                        scene<span class=\"token punctuation\">.</span>physics<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">.</span><span class=\"token function\">collider</span><span class=\"token punctuation\">(</span>gameObject<span class=\"token punctuation\">,</span> platformLimitCollider<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                            gameObject<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">setVelocityX</span><span class=\"token punctuation\">(</span>\n                                <span class=\"token operator\">-</span>gameObject<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>velocity<span class=\"token punctuation\">.</span>x\n                            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            gameObject<span class=\"token punctuation\">.</span><span class=\"token function\">setFlipX</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>gameObject<span class=\"token punctuation\">.</span>flipX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>platformLimitCollider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                        <span class=\"token comment\">// return true so the 'some' doesn't run anymore</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    lastGroundTile <span class=\"token operator\">=</span> groundTile<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>E com esse código, temos o resultado abaixo.</p>\n<p><img src=\"/c44e9c39ebda2dbd1987240257d76317/static-ai-calculation.gif\" alt=\"Cálculo estático da AI\"></p>\n<p>O meu principal objetivo é criar todas as regras de jogo baseadas em elementos e interações para que depois eu possa simplesmente criar uma fase no Tiled e tudo funcionar sem eu precisar ficar mexendo muito nela, criando colliders e outras coisas manualmente, assim como fizeram no Breath of The Wild. Eu prefiro que o jogo calcule tudo isso pra mim para que eu possa focar em criar novas fases sem dificuldade. E no final eu vou ter tipo um Mario Maker 😃.</p>\n<p>E por hoje ficamos por aqui, obrigado por ler e assistir o vídeo e não se esqueça de deixar o seu comentário sobre o que você está achando dessa série de posts / vídeos. Até semana que vem!</p>","path":"/pt-br/blog/games/criando-uma-ai-mais-inteligente-e-performatica-no-phaser-js-skate-platformer-game-devlog-15/","title":"Criando uma AI mais inteligente e performática no Phaser JS - Game Devlog #15","language":"pt-br","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjAtMTItMTVUMDA6MDA6MDAuMDAwWg==","comments":[],"relatedPosts":[{"path":"/pt-br/blog/games/criando-inteligencia-artificial-ai-dos-inimigos-no-phaser-js-skate-platformer-game-devlog-9/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjAtMTAtMzBUMDA6MDA6MDAuMDAwWg==","title":"Criando inteligência artificial (AI) dos inimigos no Phaser JS - Skate Platformer Game Devlog #09","date":"2020-10-30T00:00:00.000Z"},{"path":"/pt-br/blog/games/criando-um-build-para-celular-para-o-meu-jogo-com-o-phaser-js-game-devlog-23/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDktMDlUMDA6MDA6MDAuMDAwWg==","title":"Criando um build para celular para o meu jogo com o Phaser JS - Game Devlog #23","date":"2021-09-09T00:00:00.000Z"},{"path":"/pt-br/blog/games/criando-plataformas-para-o-meu-jogo-em-phaser-js-game-devlog-22/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDgtMjhUMDA6MDA6MDAuMDAwWg==","title":"Criando plataformas para o meu jogo em Phaser JS - Game Devlog #22","date":"2021-08-28T00:00:00.000Z"},{"path":"/pt-br/blog/games/escondendo-partes-do-mapa-com-o-phaser-js-game-devlog-21/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDctMDZUMDA6MDA6MDAuMDAwWg==","title":"Escondendo partes do mapa com o Phaser JS - Game Devlog #21","date":"2021-07-06T00:00:00.000Z"},{"path":"/pt-br/blog/games/criando-estalactites-que-caem-com-phaser-js-game-devlog-20/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDYtMjhUMDA6MDA6MDAuMDAwWg==","title":"Criando estalactites que caem com Phaser JS - Game Devlog #20","date":"2021-06-28T00:00:00.000Z"},{"path":"/pt-br/blog/games/criando-uma-monkey-bar-para-se-pendurar-com-o-phaser-js-game-devlog-19/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDYtMTlUMDA6MDA6MDAuMDAwWg==","title":"Criando uma \"Monkey Bar\" para se pendurar com o Phaser JS - Game Devlog #19","date":"2021-06-19T00:00:00.000Z"},{"path":"/pt-br/blog/games/criando-um-pogo-attack-com-o-phaser-js-game-devlog-17/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDQtMjRUMDA6MDA6MDAuMDAwWg==","title":"Criando um \"pogo-attack\" com o Phaser JS - Game Devlog #17","date":"2021-04-24T00:00:00.000Z"},{"path":"/pt-br/blog/games/adicionando-transicao-ao-carregar-uma-fase-no-phaser-js-skate-platformer-game-devlog-16/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjAtMTItMjlUMDA6MDA6MDAuMDAwWg==","title":"Adicionando transição ao carregar uma fase no Phaser JS - Game Devlog #16","date":"2020-12-29T00:00:00.000Z"},{"path":"/pt-br/blog/games/criando-clima-chuvoso-no-phaser-js-skate-platformer-game-devlog-14/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjAtMTItMDlUMDA6MDA6MDAuMDAwWg==","title":"Criando clima chuvoso no Phaser JS - Skate Platformer Game Devlog #14","date":"2020-12-09T00:00:00.000Z"},{"path":"/pt-br/blog/games/criando-uma-loading-screen-e-traduzindo-o-meu-jogo-no-phaser-js-skate-platformer-game-devlog-13/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjAtMTEtMjlUMDA6MDA6MDAuMDAwWg==","title":"Criando uma loading screen e traduzindo o meu jogo no Phaser JS - Skate Platformer Game Devlog #13","date":"2020-11-29T00:00:00.000Z"}]}