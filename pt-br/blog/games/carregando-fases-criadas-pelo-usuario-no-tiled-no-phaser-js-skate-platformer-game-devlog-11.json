{"html":"<p>Fala pessoal, no devlog de hoje vou fazer uma parada muito legal - carregar dinamicamente arquivos externos de mapa do Tiled criado pelo usuário.</p>\n<p></p><div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.42857142857143%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\"> <div class=\"embedVideo-container\"> <iframe title=\"\" src=\"https://www.youtube.com/embed/RiC4T97s8eI?rel=0\" class=\"embedVideo-iframe\" style=\"border:0; position: absolute; top: 0; left: 0; width: 100%; height: 100%; \" loading=\"eager\" allowfullscreen=\"\" sandbox=\"allow-same-origin allow-scripts allow-popups\"></iframe> </div> </div><p></p>\n<p>Primeiro, temos que entender como o Phaser funciona. O Phaser é executado dentro de um elemento de canvas do HTML que é anexado a qualquer ID de elemento HTML que você colocar na opção <code class=\"language-text\">parent</code> de configurações do Phaser, então, se eu quiser usar uma ação relacionada ao browser, como enviar um arquivo usando o elemento HTML de file input, eu tenho que cria-lo manualmente e para depois poder usa-lo quando necessário.</p>\n<div class=\"copy-code-block\"><button tabindex=\"0\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copiar</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fileInput <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlFileInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">scene</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">spriteKey</span><span class=\"token operator\">:</span> <span class=\"token string\">'file-input'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callBackFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// trigget the HTML file input click</span>\n    fileInput<span class=\"token punctuation\">.</span>fileInput<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>Mas que diabos é esse <code class=\"language-text\">HtmlFileInput</code>? É basicamente uma classe que em seu construtor eu crio dinamicamente um elemento HTML de input a anexo ele ao DOM da página. A parte de estilo existe para garantir que o elemento não seja visível para o usuário.</p>\n<div class=\"copy-code-block\"><button tabindex=\"1\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copiar</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HtmlFileInput</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n        scene<span class=\"token punctuation\">,</span>\n        spriteKey<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Phaser's parent HTML element</span>\n        <span class=\"token keyword\">const</span> mainElement <span class=\"token operator\">=</span> scene<span class=\"token punctuation\">.</span>sys<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>canvas<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// create html input type</span>\n        <span class=\"token keyword\">const</span> fileInput <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fileInput<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'file'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fileInput<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'accept'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fileInput<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> spriteKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// TODO this stylings</span>\n        fileInput<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> <span class=\"token string\">'absolute'</span><span class=\"token punctuation\">;</span>\n        fileInput<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        fileInput<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">;</span>\n        fileInput<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>marginTop <span class=\"token operator\">=</span> <span class=\"token string\">'-400px'</span><span class=\"token punctuation\">;</span>\n\n        mainElement<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>fileInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setFileInput</span><span class=\"token punctuation\">(</span>fileInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function-variable function\">setFileInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fileInput</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileInput <span class=\"token operator\">=</span> fileInput<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function-variable function\">setScene</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">scene</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scene <span class=\"token operator\">=</span> scene<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> HtmlFileInput<span class=\"token punctuation\">;</span></code></pre></div></div>\n<p>Eu sei que parece uma gambiarra, mas esta é a maneira correta de fazer isso na Phaser 3, apenas não se esqueça de remover o elemento do DOM quando terminar de usá-lo, chamando <code class=\"language-text\">fileInput.fileInput.remove()</code>.</p>\n<p>Agora preciso fazer o parse do arquivo <code class=\"language-text\">.json</code> enviado pelo usuário e deixa-lo disponível no “gerenciador de arquivos em cache” do Phaser, e a melhor maneira de fazer isso é usando a função <code class=\"language-text\">preload</code> do Phaser. Primeiro, vamos dar uma olhada em como a função de callback realmente funciona.</p>\n<div class=\"copy-code-block\"><button tabindex=\"2\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copiar</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callBackFunction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    fileInput<span class=\"token punctuation\">.</span>textfield<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onchange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        reader<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CustomStageLoadingScene'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">stageKey</span><span class=\"token operator\">:</span> <span class=\"token string\">'custom_stage'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">stageData</span><span class=\"token operator\">:</span> result<span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">nextScene</span><span class=\"token operator\">:</span> <span class=\"token string\">'GameScene'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        reader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsText</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    fileInput<span class=\"token punctuation\">.</span>textfield<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>Como você pode ver, eu estou usando o <code class=\"language-text\">FileReader</code> para carregar o arquivo e passando ele como parâmetro para uma scene nova chamada <code class=\"language-text\">CustomStageLoadingScene</code> que só existe como uma game scene auxiliar para carregar dinamicamente a fase enviada pelo usuário.</p>\n<div class=\"copy-code-block\"><button tabindex=\"3\" type=\"button\" class=\"MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary copy-code-button\"><span class=\"MuiButton-label\">Copiar</span></button><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomStageLoadingScene</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Scene</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CustomStageLoadingScene'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// data sent as a second parameter when calling the scene</span>\n        <span class=\"token comment\">// will be available here</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> stageKey<span class=\"token punctuation\">,</span> stageData<span class=\"token punctuation\">,</span> nextScene <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stageKey <span class=\"token operator\">=</span> stageKey<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stageData <span class=\"token operator\">=</span> stageData<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextScene <span class=\"token operator\">=</span> nextScene<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> stageKey<span class=\"token punctuation\">,</span> stageData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// make the JSON data available to Phaser's internal cache</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">.</span><span class=\"token function\">tilemapTiledJSON</span><span class=\"token punctuation\">(</span>stageKey<span class=\"token punctuation\">,</span> stageData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> stageKey<span class=\"token punctuation\">,</span> nextScene <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// start the next scene</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>nextScene<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> stageKey<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">stageName</span><span class=\"token operator\">:</span> <span class=\"token string\">'custom'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></div>\n<p>Agora que eu tenho os dados setados com o <code class=\"language-text\">this.load.tilemapTiledJSON()</code>, eu posso criar o novo estágio com <code class=\"language-text\">scene.make.tilemap ({key: stageKey})</code>. Show de bola!</p>\n<p>E isso é tudo por hoje, por favor, não esqueça de curtir o vídeo e se inscrever no meu canal, e se esses devlogs forem de alguma utilidade para você, me avise nos comentários abaixo. Obrigado e até a próxima.</p>","path":"/pt-br/blog/games/carregando-fases-criadas-pelo-usuario-no-tiled-no-phaser-js-skate-platformer-game-devlog-11/","title":"Carregando fases criadas pelo usuário no Tiled no Phaser JS - Skate Platformer Game Devlog #11","language":"pt-br","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjAtMTEtMTFUMDA6MDA6MDAuMDAwWg==","comments":[],"relatedPosts":[{"path":"/pt-br/blog/games/criando-um-build-para-celular-para-o-meu-jogo-com-o-phaser-js-game-devlog-23/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDktMDlUMDA6MDA6MDAuMDAwWg==","title":"Criando um build para celular para o meu jogo com o Phaser JS - Game Devlog #23","date":"2021-09-09T00:00:00.000Z"},{"path":"/pt-br/blog/games/criando-plataformas-para-o-meu-jogo-em-phaser-js-game-devlog-22/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDgtMjhUMDA6MDA6MDAuMDAwWg==","title":"Criando plataformas para o meu jogo em Phaser JS - Game Devlog #22","date":"2021-08-28T00:00:00.000Z"},{"path":"/pt-br/blog/games/escondendo-partes-do-mapa-com-o-phaser-js-game-devlog-21/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDctMDZUMDA6MDA6MDAuMDAwWg==","title":"Escondendo partes do mapa com o Phaser JS - Game Devlog #21","date":"2021-07-06T00:00:00.000Z"},{"path":"/pt-br/blog/games/criando-estalactites-que-caem-com-phaser-js-game-devlog-20/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDYtMjhUMDA6MDA6MDAuMDAwWg==","title":"Criando estalactites que caem com Phaser JS - Game Devlog #20","date":"2021-06-28T00:00:00.000Z"},{"path":"/pt-br/blog/games/criando-uma-monkey-bar-para-se-pendurar-com-o-phaser-js-game-devlog-19/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDYtMTlUMDA6MDA6MDAuMDAwWg==","title":"Criando uma \"Monkey Bar\" para se pendurar com o Phaser JS - Game Devlog #19","date":"2021-06-19T00:00:00.000Z"},{"path":"/pt-br/blog/games/criando-um-pogo-attack-com-o-phaser-js-game-devlog-17/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjEtMDQtMjRUMDA6MDA6MDAuMDAwWg==","title":"Criando um \"pogo-attack\" com o Phaser JS - Game Devlog #17","date":"2021-04-24T00:00:00.000Z"},{"path":"/pt-br/blog/games/adicionando-transicao-ao-carregar-uma-fase-no-phaser-js-skate-platformer-game-devlog-16/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjAtMTItMjlUMDA6MDA6MDAuMDAwWg==","title":"Adicionando transição ao carregar uma fase no Phaser JS - Game Devlog #16","date":"2020-12-29T00:00:00.000Z"},{"path":"/pt-br/blog/games/criando-uma-ai-mais-inteligente-e-performatica-no-phaser-js-skate-platformer-game-devlog-15/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjAtMTItMTVUMDA6MDA6MDAuMDAwWg==","title":"Criando uma AI mais inteligente e performática no Phaser JS - Game Devlog #15","date":"2020-12-15T00:00:00.000Z"},{"path":"/pt-br/blog/games/criando-clima-chuvoso-no-phaser-js-skate-platformer-game-devlog-14/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjAtMTItMDlUMDA6MDA6MDAuMDAwWg==","title":"Criando clima chuvoso no Phaser JS - Skate Platformer Game Devlog #14","date":"2020-12-09T00:00:00.000Z"},{"path":"/pt-br/blog/games/criando-uma-loading-screen-e-traduzindo-o-meu-jogo-no-phaser-js-skate-platformer-game-devlog-13/","postHashId":"Z2FtZXN0cnVlbnVsbDIwMjAtMTEtMjlUMDA6MDA6MDAuMDAwWg==","title":"Criando uma loading screen e traduzindo o meu jogo no Phaser JS - Skate Platformer Game Devlog #13","date":"2020-11-29T00:00:00.000Z"}]}